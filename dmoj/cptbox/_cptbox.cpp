/* Generated by Cython 0.27.3 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "dmoj/cptbox/helper.h", 
            "dmoj/cptbox/ptbox.h"
        ], 
        "include_dirs": [
            "dmoj/cptbox"
        ], 
        "language": "c++", 
        "libraries": [
            "rt"
        ], 
        "name": "dmoj.cptbox._cptbox", 
        "sources": [
            "/home/farhad/Desktop/judge/dmoj/cptbox/_cptbox.pyx", 
            "/home/farhad/Desktop/judge/dmoj/cptbox/helper.cpp", 
            "/home/farhad/Desktop/judge/dmoj/cptbox/ptdebug.cpp", 
            "/home/farhad/Desktop/judge/dmoj/cptbox/ptdebug_x86.cpp", 
            "/home/farhad/Desktop/judge/dmoj/cptbox/ptdebug_x64.cpp", 
            "/home/farhad/Desktop/judge/dmoj/cptbox/ptdebug_x86_on_x64.cpp", 
            "/home/farhad/Desktop/judge/dmoj/cptbox/ptdebug_x32.cpp", 
            "/home/farhad/Desktop/judge/dmoj/cptbox/ptdebug_arm.cpp", 
            "/home/farhad/Desktop/judge/dmoj/cptbox/ptdebug_arm64.cpp", 
            "/home/farhad/Desktop/judge/dmoj/cptbox/ptproc.cpp"
        ]
    }, 
    "module_name": "dmoj.cptbox._cptbox"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_27_3"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__dmoj__cptbox___cptbox
#define __PYX_HAVE_API__dmoj__cptbox___cptbox
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/resource.h>
#include "ptbox.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "helper.h"
#include "fcntl.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "dmoj/cptbox/_cptbox.pyx",
  "stringsource",
  "type.pxd",
};
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/*--- Type declarations ---*/
struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger;
struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process;

/* "libc/signal.pxd":3
 * # 7.14 Signal handling <signal.h>
 * 
 * ctypedef void (*sighandler_t)(int SIGNUM) nogil             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<signal.h>" nogil:
 */
typedef void (*__pyx_t_4libc_6signal_sighandler_t)(int);
struct __pyx_opt_args_4dmoj_6cptbox_7_cptbox_7Process__spawn;

/* "dmoj/cptbox/_cptbox.pyx":384
 *         pass
 * 
 *     cpdef _spawn(self, file, args, env=(), chdir='', fds=None):             # <<<<<<<<<<<<<<
 *         cdef child_config config
 *         config.address_space = self._child_address
 */
struct __pyx_opt_args_4dmoj_6cptbox_7_cptbox_7Process__spawn {
  int __pyx_n;
  PyObject *env;
  PyObject *chdir;
  PyObject *fds;
};

/* "dmoj/cptbox/_cptbox.pyx":177
 * 
 * 
 * cdef class Debugger:             # <<<<<<<<<<<<<<
 *     cdef pt_debugger *thisptr
 *     cdef object on_return_callback
 */
struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger {
  PyObject_HEAD
  struct __pyx_vtabstruct_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_vtab;
  pt_debugger *thisptr;
  PyObject *on_return_callback;
  int _getpid_syscall;
  int _debugger_type;
};


/* "dmoj/cptbox/_cptbox.pyx":319
 * 
 * 
 * cdef class Process:             # <<<<<<<<<<<<<<
 *     cdef pt_debugger *_debugger
 *     cdef pt_process *process
 */
struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process {
  PyObject_HEAD
  struct __pyx_vtabstruct_4dmoj_6cptbox_7_cptbox_Process *__pyx_vtab;
  pt_debugger *_debugger;
  pt_process *process;
  struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *debugger;
  int _exited;
  int _exitcode;
  unsigned int _signal;
  int _child_stdin;
  int _child_stdout;
  int _child_stderr;
  unsigned long _child_memory;
  unsigned long _child_address;
  unsigned long _child_personality;
  unsigned int _cpu_time;
  int _nproc;
  unsigned long _max_memory;
};



/* "dmoj/cptbox/_cptbox.pyx":177
 * 
 * 
 * cdef class Debugger:             # <<<<<<<<<<<<<<
 *     cdef pt_debugger *thisptr
 *     cdef object on_return_callback
 */

struct __pyx_vtabstruct_4dmoj_6cptbox_7_cptbox_Debugger {
  PyObject *(*_on_return)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *, int);
};
static struct __pyx_vtabstruct_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_vtabptr_4dmoj_6cptbox_7_cptbox_Debugger;


/* "dmoj/cptbox/_cptbox.pyx":319
 * 
 * 
 * cdef class Process:             # <<<<<<<<<<<<<<
 *     cdef pt_debugger *_debugger
 *     cdef pt_process *process
 */

struct __pyx_vtabstruct_4dmoj_6cptbox_7_cptbox_Process {
  int (*_syscall_handler)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *, int);
  int (*_event_handler)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *, int, unsigned long);
  PyObject *(*_handler)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_protection_fault)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_cpu_time_exceeded)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *, int __pyx_skip_dispatch);
  PyObject *(*_spawn)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_4dmoj_6cptbox_7_cptbox_7Process__spawn *__pyx_optional_args);
  PyObject *(*_monitor)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_4dmoj_6cptbox_7_cptbox_Process *__pyx_vtabptr_4dmoj_6cptbox_7_cptbox_Process;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_pid_t(pid_t value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntFromPy.proto */
static CYTHON_INLINE pid_t __Pyx_PyInt_As_pid_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_4dmoj_6cptbox_7_cptbox_8Debugger__on_return(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, CYTHON_UNUSED int __pyx_v_syscall); /* proto*/
static int __pyx_f_4dmoj_6cptbox_7_cptbox_7Process__syscall_handler(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_v_syscall); /* proto*/
static int __pyx_f_4dmoj_6cptbox_7_cptbox_7Process__event_handler(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_v_event, unsigned long __pyx_v_param); /* proto*/
static PyObject *__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__handler(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_syscall, PyObject *__pyx_v_handler, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__protection_fault(CYTHON_UNUSED struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_syscall, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__cpu_time_exceeded(CYTHON_UNUSED struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__spawn(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_file, PyObject *__pyx_v_args, int __pyx_skip_dispatch, struct __pyx_opt_args_4dmoj_6cptbox_7_cptbox_7Process__spawn *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__monitor(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.signal' */

/* Module declarations from 'posix.types' */

/* Module declarations from 'posix.signal' */

/* Module declarations from 'posix.time' */

/* Module declarations from 'posix.resource' */

/* Module declarations from 'dmoj.cptbox._cptbox' */
static PyTypeObject *__pyx_ptype_4dmoj_6cptbox_7_cptbox_Debugger = 0;
static PyTypeObject *__pyx_ptype_4dmoj_6cptbox_7_cptbox_Process = 0;
static int __pyx_f_4dmoj_6cptbox_7_cptbox_pt_child(void *); /*proto*/
static int __pyx_f_4dmoj_6cptbox_7_cptbox_pt_syscall_handler(void *, int); /*proto*/
static void __pyx_f_4dmoj_6cptbox_7_cptbox_pt_syscall_return_handler(void *, int); /*proto*/
static int __pyx_f_4dmoj_6cptbox_7_cptbox_pt_event_handler(void *, int, unsigned long); /*proto*/
static char **__pyx_f_4dmoj_6cptbox_7_cptbox_alloc_string_array(PyObject *); /*proto*/
static unsigned long __pyx_f_4dmoj_6cptbox_7_cptbox_get_memory(pid_t, int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "dmoj.cptbox._cptbox"
extern int __pyx_module_is_main_dmoj__cptbox___cptbox;
int __pyx_module_is_main_dmoj__cptbox___cptbox = 0;

/* Implementation of 'dmoj.cptbox._cptbox' */
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_OSError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_RuntimeError;
static const char __pyx_k__4[] = "";
static const char __pyx_k_fd[] = "fd";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_buf[] = "buf";
static const char __pyx_k_env[] = "env";
static const char __pyx_k_fds[] = "fds";
static const char __pyx_k_pid[] = "pid";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_chdir[] = "chdir";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_spawn[] = "_spawn";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_OSError[] = "OSError";
static const char __pyx_k_Process[] = "Process";
static const char __pyx_k_address[] = "address";
static const char __pyx_k_handler[] = "_handler";
static const char __pyx_k_monitor[] = "_monitor";
static const char __pyx_k_syscall[] = "syscall";
static const char __pyx_k_AT_FDCWD[] = "AT_FDCWD";
static const char __pyx_k_Debugger[] = "Debugger";
static const char __pyx_k_callback[] = "_callback";
static const char __pyx_k_debugger[] = "debugger";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_max_size[] = "max_size";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_handler_2[] = "handler";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_DEBUGGER_ARM[] = "DEBUGGER_ARM";
static const char __pyx_k_DEBUGGER_X32[] = "DEBUGGER_X32";
static const char __pyx_k_DEBUGGER_X64[] = "DEBUGGER_X64";
static const char __pyx_k_DEBUGGER_X86[] = "DEBUGGER_X86";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_debugger_type[] = "debugger_type";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_DEBUGGER_ARM64[] = "DEBUGGER_ARM64";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_was_initialized[] = "was_initialized";
static const char __pyx_k_bsd_get_proc_cwd[] = "bsd_get_proc_cwd";
static const char __pyx_k_protection_fault[] = "_protection_fault";
static const char __pyx_k_bsd_get_proc_fdno[] = "bsd_get_proc_fdno";
static const char __pyx_k_cpu_time_exceeded[] = "_cpu_time_exceeded";
static const char __pyx_k_MAX_SYSCALL_NUMBER[] = "MAX_SYSCALL_NUMBER";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_DEBUGGER_X86_ON_X64[] = "DEBUGGER_X86_ON_X64";
static const char __pyx_k_dmoj_cptbox__cptbox[] = "dmoj.cptbox._cptbox";
static const char __pyx_k_failed_to_spawn_child[] = "failed to spawn child";
static const char __pyx_k_dmoj_cptbox__cptbox_pyx[] = "dmoj/cptbox/_cptbox.pyx";
static const char __pyx_k_Unsupported_debugger_configurati[] = "Unsupported debugger configuration";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_self_thisptr_cannot_be_converted[] = "self.thisptr cannot be converted to a Python object for pickling";
static PyObject *__pyx_n_s_AT_FDCWD;
static PyObject *__pyx_n_s_DEBUGGER_ARM;
static PyObject *__pyx_n_s_DEBUGGER_ARM64;
static PyObject *__pyx_n_s_DEBUGGER_X32;
static PyObject *__pyx_n_s_DEBUGGER_X64;
static PyObject *__pyx_n_s_DEBUGGER_X86;
static PyObject *__pyx_n_s_DEBUGGER_X86_ON_X64;
static PyObject *__pyx_n_s_Debugger;
static PyObject *__pyx_n_s_MAX_SYSCALL_NUMBER;
static PyObject *__pyx_n_s_OSError;
static PyObject *__pyx_n_s_Process;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unsupported_debugger_configurati;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__4;
static PyObject *__pyx_n_s_address;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_bsd_get_proc_cwd;
static PyObject *__pyx_n_s_bsd_get_proc_fdno;
static PyObject *__pyx_n_s_buf;
static PyObject *__pyx_n_s_callback;
static PyObject *__pyx_n_s_chdir;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_cpu_time_exceeded;
static PyObject *__pyx_n_s_debugger;
static PyObject *__pyx_n_s_debugger_type;
static PyObject *__pyx_n_s_dmoj_cptbox__cptbox;
static PyObject *__pyx_kp_s_dmoj_cptbox__cptbox_pyx;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_env;
static PyObject *__pyx_kp_s_failed_to_spawn_child;
static PyObject *__pyx_n_s_fd;
static PyObject *__pyx_n_s_fds;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_handler;
static PyObject *__pyx_n_s_handler_2;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_size;
static PyObject *__pyx_n_s_monitor;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_pid;
static PyObject *__pyx_n_s_protection_fault;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_res;
static PyObject *__pyx_kp_s_self_thisptr_cannot_be_converted;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_spawn;
static PyObject *__pyx_n_s_syscall;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_was_initialized;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_get_memory(CYTHON_UNUSED PyObject *__pyx_self, pid_t __pyx_v_pid); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_2bsd_get_proc_cwd(CYTHON_UNUSED PyObject *__pyx_self, pid_t __pyx_v_pid); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_4bsd_get_proc_fdno(CYTHON_UNUSED PyObject *__pyx_self, pid_t __pyx_v_pid, int __pyx_v_fd); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4type___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_14getpid_syscall___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_7syscall___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_7syscall_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_6result___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_6result_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_7uresult___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_7uresult_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg0___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg0_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg1___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg1_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg2___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg2_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg3___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg3_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg4___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg4_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg5___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg5_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg0___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg0_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg1___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg1_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg2___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg2_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg3___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg3_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg4___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg4_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg5___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg5_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_readstr(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, unsigned long __pyx_v_address, size_t __pyx_v_max_size); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_3tid___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_3pid___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_2on_return(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_callback); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process___cinit__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_v_debugger, PyObject *__pyx_v_debugger_type, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static void __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_2__dealloc__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_4_callback(CYTHON_UNUSED struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_syscall); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_6_handler(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_syscall, PyObject *__pyx_v_handler); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8_protection_fault(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_syscall); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_10_cpu_time_exceeded(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_12_spawn(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_file, PyObject *__pyx_v_args, PyObject *__pyx_v_env, PyObject *__pyx_v_chdir, PyObject *__pyx_v_fds); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_14_monitor(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_15was_initialized___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_15_trace_syscalls___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_15_trace_syscalls_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_3pid___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_14execution_time___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_15wall_clock_time___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8cpu_time___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_10max_memory___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_6signal___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_10returncode___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8debugger___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8debugger_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8debugger_4__del__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_7_exited___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_9_exitcode___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_12_child_stdin___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_12_child_stdin_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_stdout___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_stdout_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_stderr___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_stderr_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_memory___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_memory_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_14_child_address___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_14_child_address_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_18_child_personality___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_18_child_personality_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_9_cpu_time___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_9_cpu_time_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_6_nproc___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_6_nproc_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_4dmoj_6cptbox_7_cptbox_Debugger(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4dmoj_6cptbox_7_cptbox_Process(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__11;

/* "dmoj/cptbox/_cptbox.pyx":114
 * AT_FDCWD = _AT_FDCWD
 * 
 * cdef int pt_child(void *context) nogil:             # <<<<<<<<<<<<<<
 *     cdef child_config *config = <child_config*> context
 *     return cptbox_child_run(config)
 */

static int __pyx_f_4dmoj_6cptbox_7_cptbox_pt_child(void *__pyx_v_context) {
  struct child_config *__pyx_v_config;
  int __pyx_r;

  /* "dmoj/cptbox/_cptbox.pyx":115
 * 
 * cdef int pt_child(void *context) nogil:
 *     cdef child_config *config = <child_config*> context             # <<<<<<<<<<<<<<
 *     return cptbox_child_run(config)
 * 
 */
  __pyx_v_config = ((struct child_config *)__pyx_v_context);

  /* "dmoj/cptbox/_cptbox.pyx":116
 * cdef int pt_child(void *context) nogil:
 *     cdef child_config *config = <child_config*> context
 *     return cptbox_child_run(config)             # <<<<<<<<<<<<<<
 * 
 * cdef int pt_syscall_handler(void *context, int syscall) nogil:
 */
  __pyx_r = cptbox_child_run(__pyx_v_config);
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":114
 * AT_FDCWD = _AT_FDCWD
 * 
 * cdef int pt_child(void *context) nogil:             # <<<<<<<<<<<<<<
 *     cdef child_config *config = <child_config*> context
 *     return cptbox_child_run(config)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":118
 *     return cptbox_child_run(config)
 * 
 * cdef int pt_syscall_handler(void *context, int syscall) nogil:             # <<<<<<<<<<<<<<
 *     return (<Process>context)._syscall_handler(syscall)
 * 
 */

static int __pyx_f_4dmoj_6cptbox_7_cptbox_pt_syscall_handler(void *__pyx_v_context, int __pyx_v_syscall) {
  int __pyx_r;

  /* "dmoj/cptbox/_cptbox.pyx":119
 * 
 * cdef int pt_syscall_handler(void *context, int syscall) nogil:
 *     return (<Process>context)._syscall_handler(syscall)             # <<<<<<<<<<<<<<
 * 
 * cdef void pt_syscall_return_handler(void *context, int syscall) with gil:
 */
  __pyx_r = ((struct __pyx_vtabstruct_4dmoj_6cptbox_7_cptbox_Process *)((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_context)->__pyx_vtab)->_syscall_handler(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_context), __pyx_v_syscall);
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":118
 *     return cptbox_child_run(config)
 * 
 * cdef int pt_syscall_handler(void *context, int syscall) nogil:             # <<<<<<<<<<<<<<
 *     return (<Process>context)._syscall_handler(syscall)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":121
 *     return (<Process>context)._syscall_handler(syscall)
 * 
 * cdef void pt_syscall_return_handler(void *context, int syscall) with gil:             # <<<<<<<<<<<<<<
 *     (<Debugger>context)._on_return(syscall)
 * 
 */

static void __pyx_f_4dmoj_6cptbox_7_cptbox_pt_syscall_return_handler(void *__pyx_v_context, int __pyx_v_syscall) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("pt_syscall_return_handler", 0);

  /* "dmoj/cptbox/_cptbox.pyx":122
 * 
 * cdef void pt_syscall_return_handler(void *context, int syscall) with gil:
 *     (<Debugger>context)._on_return(syscall)             # <<<<<<<<<<<<<<
 * 
 * cdef int pt_event_handler(void *context, int event, unsigned long param) nogil:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4dmoj_6cptbox_7_cptbox_Debugger *)((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_context)->__pyx_vtab)->_on_return(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_context), __pyx_v_syscall); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dmoj/cptbox/_cptbox.pyx":121
 *     return (<Process>context)._syscall_handler(syscall)
 * 
 * cdef void pt_syscall_return_handler(void *context, int syscall) with gil:             # <<<<<<<<<<<<<<
 *     (<Debugger>context)._on_return(syscall)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("dmoj.cptbox._cptbox.pt_syscall_return_handler", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "dmoj/cptbox/_cptbox.pyx":124
 *     (<Debugger>context)._on_return(syscall)
 * 
 * cdef int pt_event_handler(void *context, int event, unsigned long param) nogil:             # <<<<<<<<<<<<<<
 *     return (<Process>context)._event_handler(event, param)
 * 
 */

static int __pyx_f_4dmoj_6cptbox_7_cptbox_pt_event_handler(void *__pyx_v_context, int __pyx_v_event, unsigned long __pyx_v_param) {
  int __pyx_r;

  /* "dmoj/cptbox/_cptbox.pyx":125
 * 
 * cdef int pt_event_handler(void *context, int event, unsigned long param) nogil:
 *     return (<Process>context)._event_handler(event, param)             # <<<<<<<<<<<<<<
 * 
 * cdef char **alloc_string_array(list):
 */
  __pyx_r = ((struct __pyx_vtabstruct_4dmoj_6cptbox_7_cptbox_Process *)((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_context)->__pyx_vtab)->_event_handler(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_context), __pyx_v_event, __pyx_v_param);
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":124
 *     (<Debugger>context)._on_return(syscall)
 * 
 * cdef int pt_event_handler(void *context, int event, unsigned long param) nogil:             # <<<<<<<<<<<<<<
 *     return (<Process>context)._event_handler(event, param)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":127
 *     return (<Process>context)._event_handler(event, param)
 * 
 * cdef char **alloc_string_array(list):             # <<<<<<<<<<<<<<
 *     cdef char **array = <char**>malloc((len(list) + 1) * sizeof(char*))
 *     for i, elem in enumerate(list):
 */

static char **__pyx_f_4dmoj_6cptbox_7_cptbox_alloc_string_array(PyObject *__pyx_v_list) {
  char **__pyx_v_array;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_elem = NULL;
  char **__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("alloc_string_array", 0);

  /* "dmoj/cptbox/_cptbox.pyx":128
 * 
 * cdef char **alloc_string_array(list):
 *     cdef char **array = <char**>malloc((len(list) + 1) * sizeof(char*))             # <<<<<<<<<<<<<<
 *     for i, elem in enumerate(list):
 *         array[i] = elem
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_list); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_v_array = ((char **)malloc(((__pyx_t_1 + 1) * (sizeof(char *)))));

  /* "dmoj/cptbox/_cptbox.pyx":129
 * cdef char **alloc_string_array(list):
 *     cdef char **array = <char**>malloc((len(list) + 1) * sizeof(char*))
 *     for i, elem in enumerate(list):             # <<<<<<<<<<<<<<
 *         array[i] = elem
 *     array[len(list)] = NULL
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_list)) || PyTuple_CheckExact(__pyx_v_list)) {
    __pyx_t_3 = __pyx_v_list; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_list); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 129, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 129, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 129, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 129, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_elem, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "dmoj/cptbox/_cptbox.pyx":130
 *     cdef char **array = <char**>malloc((len(list) + 1) * sizeof(char*))
 *     for i, elem in enumerate(list):
 *         array[i] = elem             # <<<<<<<<<<<<<<
 *     array[len(list)] = NULL
 *     return array
 */
    __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_elem); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 130, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 130, __pyx_L1_error)
    (__pyx_v_array[__pyx_t_7]) = __pyx_t_6;

    /* "dmoj/cptbox/_cptbox.pyx":129
 * cdef char **alloc_string_array(list):
 *     cdef char **array = <char**>malloc((len(list) + 1) * sizeof(char*))
 *     for i, elem in enumerate(list):             # <<<<<<<<<<<<<<
 *         array[i] = elem
 *     array[len(list)] = NULL
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dmoj/cptbox/_cptbox.pyx":131
 *     for i, elem in enumerate(list):
 *         array[i] = elem
 *     array[len(list)] = NULL             # <<<<<<<<<<<<<<
 *     return array
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_list); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 131, __pyx_L1_error)
  (__pyx_v_array[__pyx_t_1]) = NULL;

  /* "dmoj/cptbox/_cptbox.pyx":132
 *         array[i] = elem
 *     array[len(list)] = NULL
 *     return array             # <<<<<<<<<<<<<<
 * 
 * cpdef unsigned long get_memory(pid_t pid) nogil:
 */
  __pyx_r = __pyx_v_array;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":127
 *     return (<Process>context)._event_handler(event, param)
 * 
 * cdef char **alloc_string_array(list):             # <<<<<<<<<<<<<<
 *     cdef char **array = <char**>malloc((len(list) + 1) * sizeof(char*))
 *     for i, elem in enumerate(list):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("dmoj.cptbox._cptbox.alloc_string_array", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_elem);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":134
 *     return array
 * 
 * cpdef unsigned long get_memory(pid_t pid) nogil:             # <<<<<<<<<<<<<<
 *     cdef unsigned long memory = 0
 *     cdef char path[128]
 */

static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_1get_memory(PyObject *__pyx_self, PyObject *__pyx_arg_pid); /*proto*/
static unsigned long __pyx_f_4dmoj_6cptbox_7_cptbox_get_memory(pid_t __pyx_v_pid, CYTHON_UNUSED int __pyx_skip_dispatch) {
  unsigned long __pyx_v_memory;
  char __pyx_v_path[0x80];
  char __pyx_v_line[0x80];
  char *__pyx_v_start;
  FILE *__pyx_v_file;
  int __pyx_v_length;
  unsigned long __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "dmoj/cptbox/_cptbox.pyx":135
 * 
 * cpdef unsigned long get_memory(pid_t pid) nogil:
 *     cdef unsigned long memory = 0             # <<<<<<<<<<<<<<
 *     cdef char path[128]
 *     cdef char line[128]
 */
  __pyx_v_memory = 0;

  /* "dmoj/cptbox/_cptbox.pyx":142
 *     cdef int length
 * 
 *     sprintf(path, '/proc/%d/status', pid)             # <<<<<<<<<<<<<<
 *     file = fopen(path, 'r')
 *     if file == NULL:
 */
  sprintf(__pyx_v_path, ((char const *)"/proc/%d/status"), __pyx_v_pid);

  /* "dmoj/cptbox/_cptbox.pyx":143
 * 
 *     sprintf(path, '/proc/%d/status', pid)
 *     file = fopen(path, 'r')             # <<<<<<<<<<<<<<
 *     if file == NULL:
 *         return 0
 */
  __pyx_v_file = fopen(__pyx_v_path, ((char const *)"r"));

  /* "dmoj/cptbox/_cptbox.pyx":144
 *     sprintf(path, '/proc/%d/status', pid)
 *     file = fopen(path, 'r')
 *     if file == NULL:             # <<<<<<<<<<<<<<
 *         return 0
 *     while True:
 */
  __pyx_t_1 = ((__pyx_v_file == NULL) != 0);
  if (__pyx_t_1) {

    /* "dmoj/cptbox/_cptbox.pyx":145
 *     file = fopen(path, 'r')
 *     if file == NULL:
 *         return 0             # <<<<<<<<<<<<<<
 *     while True:
 *         if fgets(line, 128, file) == NULL:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "dmoj/cptbox/_cptbox.pyx":144
 *     sprintf(path, '/proc/%d/status', pid)
 *     file = fopen(path, 'r')
 *     if file == NULL:             # <<<<<<<<<<<<<<
 *         return 0
 *     while True:
 */
  }

  /* "dmoj/cptbox/_cptbox.pyx":146
 *     if file == NULL:
 *         return 0
 *     while True:             # <<<<<<<<<<<<<<
 *         if fgets(line, 128, file) == NULL:
 *             break
 */
  while (1) {

    /* "dmoj/cptbox/_cptbox.pyx":147
 *         return 0
 *     while True:
 *         if fgets(line, 128, file) == NULL:             # <<<<<<<<<<<<<<
 *             break
 *         if strncmp(line, "VmHWM:", 6) == 0:
 */
    __pyx_t_1 = ((fgets(__pyx_v_line, 0x80, __pyx_v_file) == NULL) != 0);
    if (__pyx_t_1) {

      /* "dmoj/cptbox/_cptbox.pyx":148
 *     while True:
 *         if fgets(line, 128, file) == NULL:
 *             break             # <<<<<<<<<<<<<<
 *         if strncmp(line, "VmHWM:", 6) == 0:
 *             start = line
 */
      goto __pyx_L5_break;

      /* "dmoj/cptbox/_cptbox.pyx":147
 *         return 0
 *     while True:
 *         if fgets(line, 128, file) == NULL:             # <<<<<<<<<<<<<<
 *             break
 *         if strncmp(line, "VmHWM:", 6) == 0:
 */
    }

    /* "dmoj/cptbox/_cptbox.pyx":149
 *         if fgets(line, 128, file) == NULL:
 *             break
 *         if strncmp(line, "VmHWM:", 6) == 0:             # <<<<<<<<<<<<<<
 *             start = line
 *             length = strlen(line)
 */
    __pyx_t_1 = ((strncmp(__pyx_v_line, ((char const *)"VmHWM:"), 6) == 0) != 0);
    if (__pyx_t_1) {

      /* "dmoj/cptbox/_cptbox.pyx":150
 *             break
 *         if strncmp(line, "VmHWM:", 6) == 0:
 *             start = line             # <<<<<<<<<<<<<<
 *             length = strlen(line)
 *             line[length-3] = '\0'
 */
      __pyx_v_start = __pyx_v_line;

      /* "dmoj/cptbox/_cptbox.pyx":151
 *         if strncmp(line, "VmHWM:", 6) == 0:
 *             start = line
 *             length = strlen(line)             # <<<<<<<<<<<<<<
 *             line[length-3] = '\0'
 *             while not 48 <= start[0] <= 57:
 */
      __pyx_v_length = strlen(__pyx_v_line);

      /* "dmoj/cptbox/_cptbox.pyx":152
 *             start = line
 *             length = strlen(line)
 *             line[length-3] = '\0'             # <<<<<<<<<<<<<<
 *             while not 48 <= start[0] <= 57:
 *                 start += 1
 */
      (__pyx_v_line[(__pyx_v_length - 3)]) = '\x00';

      /* "dmoj/cptbox/_cptbox.pyx":153
 *             length = strlen(line)
 *             line[length-3] = '\0'
 *             while not 48 <= start[0] <= 57:             # <<<<<<<<<<<<<<
 *                 start += 1
 *             memory = strtoul(start, NULL, 0)
 */
      while (1) {
        __pyx_t_1 = (48 <= (__pyx_v_start[0]));
        if (__pyx_t_1) {
          __pyx_t_1 = ((__pyx_v_start[0]) <= 57);
        }
        __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
        if (!__pyx_t_2) break;

        /* "dmoj/cptbox/_cptbox.pyx":154
 *             line[length-3] = '\0'
 *             while not 48 <= start[0] <= 57:
 *                 start += 1             # <<<<<<<<<<<<<<
 *             memory = strtoul(start, NULL, 0)
 *             break
 */
        __pyx_v_start = (__pyx_v_start + 1);
      }

      /* "dmoj/cptbox/_cptbox.pyx":155
 *             while not 48 <= start[0] <= 57:
 *                 start += 1
 *             memory = strtoul(start, NULL, 0)             # <<<<<<<<<<<<<<
 *             break
 *     fclose(file)
 */
      __pyx_v_memory = strtoul(__pyx_v_start, NULL, 0);

      /* "dmoj/cptbox/_cptbox.pyx":156
 *                 start += 1
 *             memory = strtoul(start, NULL, 0)
 *             break             # <<<<<<<<<<<<<<
 *     fclose(file)
 *     return memory
 */
      goto __pyx_L5_break;

      /* "dmoj/cptbox/_cptbox.pyx":149
 *         if fgets(line, 128, file) == NULL:
 *             break
 *         if strncmp(line, "VmHWM:", 6) == 0:             # <<<<<<<<<<<<<<
 *             start = line
 *             length = strlen(line)
 */
    }
  }
  __pyx_L5_break:;

  /* "dmoj/cptbox/_cptbox.pyx":157
 *             memory = strtoul(start, NULL, 0)
 *             break
 *     fclose(file)             # <<<<<<<<<<<<<<
 *     return memory
 * 
 */
  fclose(__pyx_v_file);

  /* "dmoj/cptbox/_cptbox.pyx":158
 *             break
 *     fclose(file)
 *     return memory             # <<<<<<<<<<<<<<
 * 
 * def bsd_get_proc_cwd(pid_t pid):
 */
  __pyx_r = __pyx_v_memory;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":134
 *     return array
 * 
 * cpdef unsigned long get_memory(pid_t pid) nogil:             # <<<<<<<<<<<<<<
 *     cdef unsigned long memory = 0
 *     cdef char path[128]
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_1get_memory(PyObject *__pyx_self, PyObject *__pyx_arg_pid); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_1get_memory(PyObject *__pyx_self, PyObject *__pyx_arg_pid) {
  pid_t __pyx_v_pid;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_memory (wrapper)", 0);
  assert(__pyx_arg_pid); {
    __pyx_v_pid = __Pyx_PyInt_As_pid_t(__pyx_arg_pid); if (unlikely((__pyx_v_pid == ((pid_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 134, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.get_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_get_memory(__pyx_self, ((pid_t)__pyx_v_pid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_get_memory(CYTHON_UNUSED PyObject *__pyx_self, pid_t __pyx_v_pid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_memory", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_f_4dmoj_6cptbox_7_cptbox_get_memory(__pyx_v_pid, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.get_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":160
 *     return memory
 * 
 * def bsd_get_proc_cwd(pid_t pid):             # <<<<<<<<<<<<<<
 *     cdef char *buf = _bsd_get_proc_cwd(pid)
 *     if not buf:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_3bsd_get_proc_cwd(PyObject *__pyx_self, PyObject *__pyx_arg_pid); /*proto*/
static PyMethodDef __pyx_mdef_4dmoj_6cptbox_7_cptbox_3bsd_get_proc_cwd = {"bsd_get_proc_cwd", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_3bsd_get_proc_cwd, METH_O, 0};
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_3bsd_get_proc_cwd(PyObject *__pyx_self, PyObject *__pyx_arg_pid) {
  pid_t __pyx_v_pid;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bsd_get_proc_cwd (wrapper)", 0);
  assert(__pyx_arg_pid); {
    __pyx_v_pid = __Pyx_PyInt_As_pid_t(__pyx_arg_pid); if (unlikely((__pyx_v_pid == ((pid_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 160, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.bsd_get_proc_cwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_2bsd_get_proc_cwd(__pyx_self, ((pid_t)__pyx_v_pid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_2bsd_get_proc_cwd(CYTHON_UNUSED PyObject *__pyx_self, pid_t __pyx_v_pid) {
  char *__pyx_v_buf;
  PyObject *__pyx_v_res = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("bsd_get_proc_cwd", 0);

  /* "dmoj/cptbox/_cptbox.pyx":161
 * 
 * def bsd_get_proc_cwd(pid_t pid):
 *     cdef char *buf = _bsd_get_proc_cwd(pid)             # <<<<<<<<<<<<<<
 *     if not buf:
 *         PyErr_SetFromErrno(OSError)
 */
  __pyx_v_buf = bsd_get_proc_cwd(__pyx_v_pid);

  /* "dmoj/cptbox/_cptbox.pyx":162
 * def bsd_get_proc_cwd(pid_t pid):
 *     cdef char *buf = _bsd_get_proc_cwd(pid)
 *     if not buf:             # <<<<<<<<<<<<<<
 *         PyErr_SetFromErrno(OSError)
 *     res = <object>buf
 */
  __pyx_t_1 = ((!(__pyx_v_buf != 0)) != 0);
  if (__pyx_t_1) {

    /* "dmoj/cptbox/_cptbox.pyx":163
 *     cdef char *buf = _bsd_get_proc_cwd(pid)
 *     if not buf:
 *         PyErr_SetFromErrno(OSError)             # <<<<<<<<<<<<<<
 *     res = <object>buf
 *     free(buf)
 */
    __pyx_t_2 = PyErr_SetFromErrno(__pyx_builtin_OSError); if (unlikely(__pyx_t_2 == ((PyObject *)NULL))) __PYX_ERR(0, 163, __pyx_L1_error)

    /* "dmoj/cptbox/_cptbox.pyx":162
 * def bsd_get_proc_cwd(pid_t pid):
 *     cdef char *buf = _bsd_get_proc_cwd(pid)
 *     if not buf:             # <<<<<<<<<<<<<<
 *         PyErr_SetFromErrno(OSError)
 *     res = <object>buf
 */
  }

  /* "dmoj/cptbox/_cptbox.pyx":164
 *     if not buf:
 *         PyErr_SetFromErrno(OSError)
 *     res = <object>buf             # <<<<<<<<<<<<<<
 *     free(buf)
 *     return res
 */
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_buf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_t_3;
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_res = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "dmoj/cptbox/_cptbox.pyx":165
 *         PyErr_SetFromErrno(OSError)
 *     res = <object>buf
 *     free(buf)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  free(__pyx_v_buf);

  /* "dmoj/cptbox/_cptbox.pyx":166
 *     res = <object>buf
 *     free(buf)
 *     return res             # <<<<<<<<<<<<<<
 * 
 * def bsd_get_proc_fdno(pid_t pid, int fd):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":160
 *     return memory
 * 
 * def bsd_get_proc_cwd(pid_t pid):             # <<<<<<<<<<<<<<
 *     cdef char *buf = _bsd_get_proc_cwd(pid)
 *     if not buf:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.bsd_get_proc_cwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":168
 *     return res
 * 
 * def bsd_get_proc_fdno(pid_t pid, int fd):             # <<<<<<<<<<<<<<
 *     cdef char *buf = _bsd_get_proc_fdno(pid, fd)
 *     if not buf:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_5bsd_get_proc_fdno(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4dmoj_6cptbox_7_cptbox_5bsd_get_proc_fdno = {"bsd_get_proc_fdno", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_5bsd_get_proc_fdno, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_5bsd_get_proc_fdno(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  pid_t __pyx_v_pid;
  int __pyx_v_fd;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bsd_get_proc_fdno (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pid,&__pyx_n_s_fd,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fd)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("bsd_get_proc_fdno", 1, 2, 2, 1); __PYX_ERR(0, 168, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bsd_get_proc_fdno") < 0)) __PYX_ERR(0, 168, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_pid = __Pyx_PyInt_As_pid_t(values[0]); if (unlikely((__pyx_v_pid == ((pid_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
    __pyx_v_fd = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_fd == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bsd_get_proc_fdno", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 168, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.bsd_get_proc_fdno", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_4bsd_get_proc_fdno(__pyx_self, __pyx_v_pid, __pyx_v_fd);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_4bsd_get_proc_fdno(CYTHON_UNUSED PyObject *__pyx_self, pid_t __pyx_v_pid, int __pyx_v_fd) {
  char *__pyx_v_buf;
  PyObject *__pyx_v_res = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("bsd_get_proc_fdno", 0);

  /* "dmoj/cptbox/_cptbox.pyx":169
 * 
 * def bsd_get_proc_fdno(pid_t pid, int fd):
 *     cdef char *buf = _bsd_get_proc_fdno(pid, fd)             # <<<<<<<<<<<<<<
 *     if not buf:
 *         PyErr_SetFromErrno(OSError)
 */
  __pyx_v_buf = bsd_get_proc_fdno(__pyx_v_pid, __pyx_v_fd);

  /* "dmoj/cptbox/_cptbox.pyx":170
 * def bsd_get_proc_fdno(pid_t pid, int fd):
 *     cdef char *buf = _bsd_get_proc_fdno(pid, fd)
 *     if not buf:             # <<<<<<<<<<<<<<
 *         PyErr_SetFromErrno(OSError)
 *     res = <object>buf
 */
  __pyx_t_1 = ((!(__pyx_v_buf != 0)) != 0);
  if (__pyx_t_1) {

    /* "dmoj/cptbox/_cptbox.pyx":171
 *     cdef char *buf = _bsd_get_proc_fdno(pid, fd)
 *     if not buf:
 *         PyErr_SetFromErrno(OSError)             # <<<<<<<<<<<<<<
 *     res = <object>buf
 *     free(buf)
 */
    __pyx_t_2 = PyErr_SetFromErrno(__pyx_builtin_OSError); if (unlikely(__pyx_t_2 == ((PyObject *)NULL))) __PYX_ERR(0, 171, __pyx_L1_error)

    /* "dmoj/cptbox/_cptbox.pyx":170
 * def bsd_get_proc_fdno(pid_t pid, int fd):
 *     cdef char *buf = _bsd_get_proc_fdno(pid, fd)
 *     if not buf:             # <<<<<<<<<<<<<<
 *         PyErr_SetFromErrno(OSError)
 *     res = <object>buf
 */
  }

  /* "dmoj/cptbox/_cptbox.pyx":172
 *     if not buf:
 *         PyErr_SetFromErrno(OSError)
 *     res = <object>buf             # <<<<<<<<<<<<<<
 *     free(buf)
 *     return res
 */
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_buf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_t_3;
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_res = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "dmoj/cptbox/_cptbox.pyx":173
 *         PyErr_SetFromErrno(OSError)
 *     res = <object>buf
 *     free(buf)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  free(__pyx_v_buf);

  /* "dmoj/cptbox/_cptbox.pyx":174
 *     res = <object>buf
 *     free(buf)
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":168
 *     return res
 * 
 * def bsd_get_proc_fdno(pid_t pid, int fd):             # <<<<<<<<<<<<<<
 *     cdef char *buf = _bsd_get_proc_fdno(pid, fd)
 *     if not buf:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.bsd_get_proc_fdno", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":184
 * 
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._debugger_type
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4type___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4type___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":185
 *     property type:
 *         def __get__(self):
 *             return self._debugger_type             # <<<<<<<<<<<<<<
 * 
 *     property getpid_syscall:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_debugger_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":184
 * 
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._debugger_type
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":188
 * 
 *     property getpid_syscall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getpid_syscall
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_14getpid_syscall_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_14getpid_syscall_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_14getpid_syscall___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_14getpid_syscall___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":189
 *     property getpid_syscall:
 *         def __get__(self):
 *             return self._getpid_syscall             # <<<<<<<<<<<<<<
 * 
 *     property syscall:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_getpid_syscall); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":188
 * 
 *     property getpid_syscall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getpid_syscall
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.getpid_syscall.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":192
 * 
 *     property syscall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.syscall()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7syscall_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7syscall_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_7syscall___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_7syscall___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":193
 *     property syscall:
 *         def __get__(self):
 *             return self.thisptr.syscall()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->syscall()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":192
 * 
 *     property syscall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.syscall()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.syscall.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":195
 *             return self.thisptr.syscall()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.syscall(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7syscall_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7syscall_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_7syscall_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_7syscall_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":196
 * 
 *         def __set__(self, value):
 *             self.thisptr.syscall(value)             # <<<<<<<<<<<<<<
 * 
 *     property result:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L1_error)
  __pyx_v_self->thisptr->syscall(__pyx_t_1);

  /* "dmoj/cptbox/_cptbox.pyx":195
 *             return self.thisptr.syscall()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.syscall(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.syscall.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":199
 * 
 *     property result:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.result()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_6result_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_6result_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_6result___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_6result___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":200
 *     property result:
 *         def __get__(self):
 *             return self.thisptr.result()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->thisptr->result()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":199
 * 
 *     property result:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.result()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.result.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":202
 *             return self.thisptr.result()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.result(<long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_6result_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_6result_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_6result_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_6result_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":203
 * 
 *         def __set__(self, value):
 *             self.thisptr.result(<long>value)             # <<<<<<<<<<<<<<
 * 
 *     property uresult:
 */
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_v_self->thisptr->result(((long)__pyx_t_1));

  /* "dmoj/cptbox/_cptbox.pyx":202
 *             return self.thisptr.result()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.result(<long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.result.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":206
 * 
 *     property uresult:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.result()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7uresult_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7uresult_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_7uresult___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_7uresult___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":207
 *     property uresult:
 *         def __get__(self):
 *             return <unsigned long>self.thisptr.result()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_v_self->thisptr->result())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":206
 * 
 *     property uresult:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.result()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.uresult.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":209
 *             return <unsigned long>self.thisptr.result()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.result(<long><unsigned long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7uresult_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7uresult_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_7uresult_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_7uresult_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":210
 * 
 *         def __set__(self, value):
 *             self.thisptr.result(<long><unsigned long>value)             # <<<<<<<<<<<<<<
 * 
 *     property arg0:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L1_error)
  __pyx_v_self->thisptr->result(((long)((unsigned long)__pyx_t_1)));

  /* "dmoj/cptbox/_cptbox.pyx":209
 *             return <unsigned long>self.thisptr.result()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.result(<long><unsigned long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.uresult.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":213
 * 
 *     property arg0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg0()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg0___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg0___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":214
 *     property arg0:
 *         def __get__(self):
 *             return self.thisptr.arg0()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->thisptr->arg0()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":213
 * 
 *     property arg0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg0()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.arg0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":216
 *             return self.thisptr.arg0()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg0(<long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg0_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg0_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg0_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg0_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":217
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg0(<long>value)             # <<<<<<<<<<<<<<
 * 
 *     property arg1:
 */
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 217, __pyx_L1_error)
  __pyx_v_self->thisptr->arg0(((long)__pyx_t_1));

  /* "dmoj/cptbox/_cptbox.pyx":216
 *             return self.thisptr.arg0()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg0(<long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.arg0.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":220
 * 
 *     property arg1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg1()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg1___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg1___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":221
 *     property arg1:
 *         def __get__(self):
 *             return self.thisptr.arg1()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->thisptr->arg1()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":220
 * 
 *     property arg1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg1()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.arg1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":223
 *             return self.thisptr.arg1()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg1(<long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg1_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg1_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":224
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg1(<long>value)             # <<<<<<<<<<<<<<
 * 
 *     property arg2:
 */
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L1_error)
  __pyx_v_self->thisptr->arg1(((long)__pyx_t_1));

  /* "dmoj/cptbox/_cptbox.pyx":223
 *             return self.thisptr.arg1()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg1(<long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.arg1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":227
 * 
 *     property arg2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg2()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg2___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg2___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":228
 *     property arg2:
 *         def __get__(self):
 *             return self.thisptr.arg2()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->thisptr->arg2()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":227
 * 
 *     property arg2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg2()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.arg2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":230
 *             return self.thisptr.arg2()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg2(<long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg2_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg2_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":231
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg2(<long>value)             # <<<<<<<<<<<<<<
 * 
 *     property arg3:
 */
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_v_self->thisptr->arg2(((long)__pyx_t_1));

  /* "dmoj/cptbox/_cptbox.pyx":230
 *             return self.thisptr.arg2()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg2(<long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.arg2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":234
 * 
 *     property arg3:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg3()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg3_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg3_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg3___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg3___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":235
 *     property arg3:
 *         def __get__(self):
 *             return self.thisptr.arg3()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->thisptr->arg3()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":234
 * 
 *     property arg3:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg3()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.arg3.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":237
 *             return self.thisptr.arg3()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg3(<long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg3_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg3_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":238
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg3(<long>value)             # <<<<<<<<<<<<<<
 * 
 *     property arg4:
 */
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L1_error)
  __pyx_v_self->thisptr->arg3(((long)__pyx_t_1));

  /* "dmoj/cptbox/_cptbox.pyx":237
 *             return self.thisptr.arg3()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg3(<long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.arg3.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":241
 * 
 *     property arg4:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg4()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg4_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg4_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg4___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg4___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":242
 *     property arg4:
 *         def __get__(self):
 *             return self.thisptr.arg4()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->thisptr->arg4()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":241
 * 
 *     property arg4:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg4()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.arg4.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":244
 *             return self.thisptr.arg4()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg4(<long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg4_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg4_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg4_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg4_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":245
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg4(<long>value)             # <<<<<<<<<<<<<<
 * 
 *     property arg5:
 */
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L1_error)
  __pyx_v_self->thisptr->arg4(((long)__pyx_t_1));

  /* "dmoj/cptbox/_cptbox.pyx":244
 *             return self.thisptr.arg4()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg4(<long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.arg4.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":248
 * 
 *     property arg5:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg5()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg5_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg5_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg5___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg5___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":249
 *     property arg5:
 *         def __get__(self):
 *             return self.thisptr.arg5()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->thisptr->arg5()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":248
 * 
 *     property arg5:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.arg5()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.arg5.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":251
 *             return self.thisptr.arg5()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg5(<long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg5_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg5_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg5_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4arg5_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":252
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg5(<long>value)             # <<<<<<<<<<<<<<
 * 
 *     property uarg0:
 */
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L1_error)
  __pyx_v_self->thisptr->arg5(((long)__pyx_t_1));

  /* "dmoj/cptbox/_cptbox.pyx":251
 *             return self.thisptr.arg5()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg5(<long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.arg5.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":255
 * 
 *     property uarg0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg0()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg0___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg0___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":256
 *     property uarg0:
 *         def __get__(self):
 *             return <unsigned long>self.thisptr.arg0()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_v_self->thisptr->arg0())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":255
 * 
 *     property uarg0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg0()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.uarg0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":258
 *             return <unsigned long>self.thisptr.arg0()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg0(<long><unsigned long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg0_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg0_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg0_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg0_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":259
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg0(<long><unsigned long>value)             # <<<<<<<<<<<<<<
 * 
 *     property uarg1:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 259, __pyx_L1_error)
  __pyx_v_self->thisptr->arg0(((long)((unsigned long)__pyx_t_1)));

  /* "dmoj/cptbox/_cptbox.pyx":258
 *             return <unsigned long>self.thisptr.arg0()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg0(<long><unsigned long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.uarg0.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":262
 * 
 *     property uarg1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg1()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg1___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg1___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":263
 *     property uarg1:
 *         def __get__(self):
 *             return <unsigned long>self.thisptr.arg1()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_v_self->thisptr->arg1())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":262
 * 
 *     property uarg1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg1()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.uarg1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":265
 *             return <unsigned long>self.thisptr.arg1()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg1(<long><unsigned long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg1_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg1_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":266
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg1(<long><unsigned long>value)             # <<<<<<<<<<<<<<
 * 
 *     property uarg2:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 266, __pyx_L1_error)
  __pyx_v_self->thisptr->arg1(((long)((unsigned long)__pyx_t_1)));

  /* "dmoj/cptbox/_cptbox.pyx":265
 *             return <unsigned long>self.thisptr.arg1()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg1(<long><unsigned long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.uarg1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":269
 * 
 *     property uarg2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg2()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg2___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg2___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":270
 *     property uarg2:
 *         def __get__(self):
 *             return <unsigned long>self.thisptr.arg2()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_v_self->thisptr->arg2())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":269
 * 
 *     property uarg2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg2()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.uarg2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":272
 *             return <unsigned long>self.thisptr.arg2()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg2(<long><unsigned long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg2_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg2_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":273
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg2(<long><unsigned long>value)             # <<<<<<<<<<<<<<
 * 
 *     property uarg3:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 273, __pyx_L1_error)
  __pyx_v_self->thisptr->arg2(((long)((unsigned long)__pyx_t_1)));

  /* "dmoj/cptbox/_cptbox.pyx":272
 *             return <unsigned long>self.thisptr.arg2()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg2(<long><unsigned long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.uarg2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":276
 * 
 *     property uarg3:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg3()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg3_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg3_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg3___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg3___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":277
 *     property uarg3:
 *         def __get__(self):
 *             return <unsigned long>self.thisptr.arg3()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_v_self->thisptr->arg3())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":276
 * 
 *     property uarg3:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg3()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.uarg3.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":279
 *             return <unsigned long>self.thisptr.arg3()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg3(<long><unsigned long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg3_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg3_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":280
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg3(<long><unsigned long>value)             # <<<<<<<<<<<<<<
 * 
 *     property uarg4:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L1_error)
  __pyx_v_self->thisptr->arg3(((long)((unsigned long)__pyx_t_1)));

  /* "dmoj/cptbox/_cptbox.pyx":279
 *             return <unsigned long>self.thisptr.arg3()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg3(<long><unsigned long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.uarg3.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":283
 * 
 *     property uarg4:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg4()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg4_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg4_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg4___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg4___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":284
 *     property uarg4:
 *         def __get__(self):
 *             return <unsigned long>self.thisptr.arg4()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_v_self->thisptr->arg4())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":283
 * 
 *     property uarg4:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg4()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.uarg4.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":286
 *             return <unsigned long>self.thisptr.arg4()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg4(<long><unsigned long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg4_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg4_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg4_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg4_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":287
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg4(<long><unsigned long>value)             # <<<<<<<<<<<<<<
 * 
 *     property uarg5:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 287, __pyx_L1_error)
  __pyx_v_self->thisptr->arg4(((long)((unsigned long)__pyx_t_1)));

  /* "dmoj/cptbox/_cptbox.pyx":286
 *             return <unsigned long>self.thisptr.arg4()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg4(<long><unsigned long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.uarg4.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":290
 * 
 *     property uarg5:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg5()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg5_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg5_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg5___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg5___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":291
 *     property uarg5:
 *         def __get__(self):
 *             return <unsigned long>self.thisptr.arg5()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_v_self->thisptr->arg5())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":290
 * 
 *     property uarg5:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long>self.thisptr.arg5()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.uarg5.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":293
 *             return <unsigned long>self.thisptr.arg5()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg5(<long><unsigned long>value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg5_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg5_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg5_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg5_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":294
 * 
 *         def __set__(self, value):
 *             self.thisptr.arg5(<long><unsigned long>value)             # <<<<<<<<<<<<<<
 * 
 *     def readstr(self, unsigned long address, size_t max_size=4096):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)
  __pyx_v_self->thisptr->arg5(((long)((unsigned long)__pyx_t_1)));

  /* "dmoj/cptbox/_cptbox.pyx":293
 *             return <unsigned long>self.thisptr.arg5()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.thisptr.arg5(<long><unsigned long>value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.uarg5.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":296
 *             self.thisptr.arg5(<long><unsigned long>value)
 * 
 *     def readstr(self, unsigned long address, size_t max_size=4096):             # <<<<<<<<<<<<<<
 *         cdef char* str = self.thisptr.readstr(address, max_size)
 *         pystr = <object>str
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_1readstr(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_1readstr(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned long __pyx_v_address;
  size_t __pyx_v_max_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readstr (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_address,&__pyx_n_s_max_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_address)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_size);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readstr") < 0)) __PYX_ERR(0, 296, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_address = __Pyx_PyInt_As_unsigned_long(values[0]); if (unlikely((__pyx_v_address == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_max_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_max_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L3_error)
    } else {
      __pyx_v_max_size = ((size_t)0x1000);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readstr", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 296, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.readstr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_readstr(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), __pyx_v_address, __pyx_v_max_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_readstr(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, unsigned long __pyx_v_address, size_t __pyx_v_max_size) {
  char *__pyx_v_str;
  PyObject *__pyx_v_pystr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("readstr", 0);

  /* "dmoj/cptbox/_cptbox.pyx":297
 * 
 *     def readstr(self, unsigned long address, size_t max_size=4096):
 *         cdef char* str = self.thisptr.readstr(address, max_size)             # <<<<<<<<<<<<<<
 *         pystr = <object>str
 *         self.thisptr.freestr(str)
 */
  __pyx_v_str = __pyx_v_self->thisptr->readstr(__pyx_v_address, __pyx_v_max_size);

  /* "dmoj/cptbox/_cptbox.pyx":298
 *     def readstr(self, unsigned long address, size_t max_size=4096):
 *         cdef char* str = self.thisptr.readstr(address, max_size)
 *         pystr = <object>str             # <<<<<<<<<<<<<<
 *         self.thisptr.freestr(str)
 *         return pystr
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_str); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pystr = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "dmoj/cptbox/_cptbox.pyx":299
 *         cdef char* str = self.thisptr.readstr(address, max_size)
 *         pystr = <object>str
 *         self.thisptr.freestr(str)             # <<<<<<<<<<<<<<
 *         return pystr
 * 
 */
  __pyx_v_self->thisptr->freestr(__pyx_v_str);

  /* "dmoj/cptbox/_cptbox.pyx":300
 *         pystr = <object>str
 *         self.thisptr.freestr(str)
 *         return pystr             # <<<<<<<<<<<<<<
 * 
 *     property tid:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pystr);
  __pyx_r = __pyx_v_pystr;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":296
 *             self.thisptr.arg5(<long><unsigned long>value)
 * 
 *     def readstr(self, unsigned long address, size_t max_size=4096):             # <<<<<<<<<<<<<<
 *         cdef char* str = self.thisptr.readstr(address, max_size)
 *         pystr = <object>str
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.readstr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pystr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":303
 * 
 *     property tid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.gettid()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_3tid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_3tid_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_3tid___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_3tid___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":304
 *     property tid:
 *         def __get__(self):
 *             return self.thisptr.gettid()             # <<<<<<<<<<<<<<
 * 
 *     property pid:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_pid_t(__pyx_v_self->thisptr->gettid()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":303
 * 
 *     property tid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.gettid()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.tid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":307
 * 
 *     property pid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getpid()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_3pid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_3pid_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_3pid___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_3pid___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":308
 *     property pid:
 *         def __get__(self):
 *             return self.thisptr.getpid()             # <<<<<<<<<<<<<<
 * 
 *     def on_return(self, callback):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_pid_t(__pyx_v_self->thisptr->getpid()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":307
 * 
 *     property pid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getpid()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.pid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":310
 *             return self.thisptr.getpid()
 * 
 *     def on_return(self, callback):             # <<<<<<<<<<<<<<
 *         self.on_return_callback = callback
 *         self.thisptr.on_return(pt_syscall_return_handler, <void*>self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_3on_return(PyObject *__pyx_v_self, PyObject *__pyx_v_callback); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_3on_return(PyObject *__pyx_v_self, PyObject *__pyx_v_callback) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_return (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_2on_return(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v_callback));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_2on_return(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, PyObject *__pyx_v_callback) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_return", 0);

  /* "dmoj/cptbox/_cptbox.pyx":311
 * 
 *     def on_return(self, callback):
 *         self.on_return_callback = callback             # <<<<<<<<<<<<<<
 *         self.thisptr.on_return(pt_syscall_return_handler, <void*>self)
 * 
 */
  __Pyx_INCREF(__pyx_v_callback);
  __Pyx_GIVEREF(__pyx_v_callback);
  __Pyx_GOTREF(__pyx_v_self->on_return_callback);
  __Pyx_DECREF(__pyx_v_self->on_return_callback);
  __pyx_v_self->on_return_callback = __pyx_v_callback;

  /* "dmoj/cptbox/_cptbox.pyx":312
 *     def on_return(self, callback):
 *         self.on_return_callback = callback
 *         self.thisptr.on_return(pt_syscall_return_handler, <void*>self)             # <<<<<<<<<<<<<<
 * 
 *     cdef _on_return(self, int syscall) with gil:
 */
  __pyx_v_self->thisptr->on_return(__pyx_f_4dmoj_6cptbox_7_cptbox_pt_syscall_return_handler, ((void *)__pyx_v_self));

  /* "dmoj/cptbox/_cptbox.pyx":310
 *             return self.thisptr.getpid()
 * 
 *     def on_return(self, callback):             # <<<<<<<<<<<<<<
 *         self.on_return_callback = callback
 *         self.thisptr.on_return(pt_syscall_return_handler, <void*>self)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":314
 *         self.thisptr.on_return(pt_syscall_return_handler, <void*>self)
 * 
 *     cdef _on_return(self, int syscall) with gil:             # <<<<<<<<<<<<<<
 *         self.on_return_callback()
 *         self.on_return_callback = None
 */

static PyObject *__pyx_f_4dmoj_6cptbox_7_cptbox_8Debugger__on_return(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, CYTHON_UNUSED int __pyx_v_syscall) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_on_return", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_self);

  /* "dmoj/cptbox/_cptbox.pyx":315
 * 
 *     cdef _on_return(self, int syscall) with gil:
 *         self.on_return_callback()             # <<<<<<<<<<<<<<
 *         self.on_return_callback = None
 * 
 */
  __Pyx_INCREF(__pyx_v_self->on_return_callback);
  __pyx_t_2 = __pyx_v_self->on_return_callback; __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dmoj/cptbox/_cptbox.pyx":316
 *     cdef _on_return(self, int syscall) with gil:
 *         self.on_return_callback()
 *         self.on_return_callback = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->on_return_callback);
  __Pyx_DECREF(__pyx_v_self->on_return_callback);
  __pyx_v_self->on_return_callback = Py_None;

  /* "dmoj/cptbox/_cptbox.pyx":314
 *         self.thisptr.on_return(pt_syscall_return_handler, <void*>self)
 * 
 *     cdef _on_return(self, int syscall) with gil:             # <<<<<<<<<<<<<<
 *         self.on_return_callback()
 *         self.on_return_callback = None
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger._on_return", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4__reduce_cython__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_6__setstate_cython__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_8Debugger_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Debugger.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":332
 *     cdef unsigned long _max_memory
 * 
 *     def __cinit__(self, int debugger, debugger_type, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._child_memory = self._child_address = 0
 *         self._child_stdin = self._child_stdout = self._child_stderr = -1
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_debugger;
  PyObject *__pyx_v_debugger_type = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_debugger,&__pyx_n_s_debugger_type,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_debugger)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_debugger_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 2, 1); __PYX_ERR(0, 332, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 332, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_debugger = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_debugger == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 332, __pyx_L3_error)
    __pyx_v_debugger_type = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 332, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process___cinit__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), __pyx_v_debugger, __pyx_v_debugger_type, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process___cinit__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_v_debugger, PyObject *__pyx_v_debugger_type, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  pt_debugger *__pyx_t_5;
  pt_process *__pyx_t_6;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":333
 * 
 *     def __cinit__(self, int debugger, debugger_type, *args, **kwargs):
 *         self._child_memory = self._child_address = 0             # <<<<<<<<<<<<<<
 *         self._child_stdin = self._child_stdout = self._child_stderr = -1
 *         self._cpu_time = 0
 */
  __pyx_v_self->_child_memory = 0;
  __pyx_v_self->_child_address = 0;

  /* "dmoj/cptbox/_cptbox.pyx":334
 *     def __cinit__(self, int debugger, debugger_type, *args, **kwargs):
 *         self._child_memory = self._child_address = 0
 *         self._child_stdin = self._child_stdout = self._child_stderr = -1             # <<<<<<<<<<<<<<
 *         self._cpu_time = 0
 *         self._nproc = -1
 */
  __pyx_v_self->_child_stdin = -1;
  __pyx_v_self->_child_stdout = -1;
  __pyx_v_self->_child_stderr = -1;

  /* "dmoj/cptbox/_cptbox.pyx":335
 *         self._child_memory = self._child_address = 0
 *         self._child_stdin = self._child_stdout = self._child_stderr = -1
 *         self._cpu_time = 0             # <<<<<<<<<<<<<<
 *         self._nproc = -1
 *         self._signal = 0
 */
  __pyx_v_self->_cpu_time = 0;

  /* "dmoj/cptbox/_cptbox.pyx":336
 *         self._child_stdin = self._child_stdout = self._child_stderr = -1
 *         self._cpu_time = 0
 *         self._nproc = -1             # <<<<<<<<<<<<<<
 *         self._signal = 0
 * 
 */
  __pyx_v_self->_nproc = -1;

  /* "dmoj/cptbox/_cptbox.pyx":337
 *         self._cpu_time = 0
 *         self._nproc = -1
 *         self._signal = 0             # <<<<<<<<<<<<<<
 * 
 *         self._debugger = get_ptdebugger(debugger)
 */
  __pyx_v_self->_signal = 0;

  /* "dmoj/cptbox/_cptbox.pyx":339
 *         self._signal = 0
 * 
 *         self._debugger = get_ptdebugger(debugger)             # <<<<<<<<<<<<<<
 *         if not self._debugger:
 *             raise ValueError('Unsupported debugger configuration')
 */
  __pyx_v_self->_debugger = get_ptdebugger(__pyx_v_debugger);

  /* "dmoj/cptbox/_cptbox.pyx":340
 * 
 *         self._debugger = get_ptdebugger(debugger)
 *         if not self._debugger:             # <<<<<<<<<<<<<<
 *             raise ValueError('Unsupported debugger configuration')
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_self->_debugger != 0)) != 0);
  if (__pyx_t_1) {

    /* "dmoj/cptbox/_cptbox.pyx":341
 *         self._debugger = get_ptdebugger(debugger)
 *         if not self._debugger:
 *             raise ValueError('Unsupported debugger configuration')             # <<<<<<<<<<<<<<
 * 
 *         self.debugger = <Debugger?>debugger_type()
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 341, __pyx_L1_error)

    /* "dmoj/cptbox/_cptbox.pyx":340
 * 
 *         self._debugger = get_ptdebugger(debugger)
 *         if not self._debugger:             # <<<<<<<<<<<<<<
 *             raise ValueError('Unsupported debugger configuration')
 * 
 */
  }

  /* "dmoj/cptbox/_cptbox.pyx":343
 *             raise ValueError('Unsupported debugger configuration')
 * 
 *         self.debugger = <Debugger?>debugger_type()             # <<<<<<<<<<<<<<
 *         self.debugger.thisptr = self._debugger
 *         self.debugger._getpid_syscall = self._debugger.getpid_syscall()
 */
  __Pyx_INCREF(__pyx_v_debugger_type);
  __pyx_t_3 = __pyx_v_debugger_type; __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 343, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_4dmoj_6cptbox_7_cptbox_Debugger)))) __PYX_ERR(0, 343, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_2;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->debugger);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->debugger));
  __pyx_v_self->debugger = ((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "dmoj/cptbox/_cptbox.pyx":344
 * 
 *         self.debugger = <Debugger?>debugger_type()
 *         self.debugger.thisptr = self._debugger             # <<<<<<<<<<<<<<
 *         self.debugger._getpid_syscall = self._debugger.getpid_syscall()
 *         self.debugger._debugger_type = debugger
 */
  __pyx_t_5 = __pyx_v_self->_debugger;
  __pyx_v_self->debugger->thisptr = __pyx_t_5;

  /* "dmoj/cptbox/_cptbox.pyx":345
 *         self.debugger = <Debugger?>debugger_type()
 *         self.debugger.thisptr = self._debugger
 *         self.debugger._getpid_syscall = self._debugger.getpid_syscall()             # <<<<<<<<<<<<<<
 *         self.debugger._debugger_type = debugger
 *         self.process = new pt_process(self._debugger)
 */
  __pyx_v_self->debugger->_getpid_syscall = __pyx_v_self->_debugger->getpid_syscall();

  /* "dmoj/cptbox/_cptbox.pyx":346
 *         self.debugger.thisptr = self._debugger
 *         self.debugger._getpid_syscall = self._debugger.getpid_syscall()
 *         self.debugger._debugger_type = debugger             # <<<<<<<<<<<<<<
 *         self.process = new pt_process(self._debugger)
 *         self.process.set_callback(pt_syscall_handler, <void*>self)
 */
  __pyx_v_self->debugger->_debugger_type = __pyx_v_debugger;

  /* "dmoj/cptbox/_cptbox.pyx":347
 *         self.debugger._getpid_syscall = self._debugger.getpid_syscall()
 *         self.debugger._debugger_type = debugger
 *         self.process = new pt_process(self._debugger)             # <<<<<<<<<<<<<<
 *         self.process.set_callback(pt_syscall_handler, <void*>self)
 *         self.process.set_event_proc(pt_event_handler, <void*>self)
 */
  try {
    __pyx_t_6 = new pt_process(__pyx_v_self->_debugger);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 347, __pyx_L1_error)
  }
  __pyx_v_self->process = __pyx_t_6;

  /* "dmoj/cptbox/_cptbox.pyx":348
 *         self.debugger._debugger_type = debugger
 *         self.process = new pt_process(self._debugger)
 *         self.process.set_callback(pt_syscall_handler, <void*>self)             # <<<<<<<<<<<<<<
 *         self.process.set_event_proc(pt_event_handler, <void*>self)
 * 
 */
  __pyx_v_self->process->set_callback(__pyx_f_4dmoj_6cptbox_7_cptbox_pt_syscall_handler, ((void *)__pyx_v_self));

  /* "dmoj/cptbox/_cptbox.pyx":349
 *         self.process = new pt_process(self._debugger)
 *         self.process.set_callback(pt_syscall_handler, <void*>self)
 *         self.process.set_event_proc(pt_event_handler, <void*>self)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->process->set_event_proc(__pyx_f_4dmoj_6cptbox_7_cptbox_pt_event_handler, ((void *)__pyx_v_self));

  /* "dmoj/cptbox/_cptbox.pyx":332
 *     cdef unsigned long _max_memory
 * 
 *     def __cinit__(self, int debugger, debugger_type, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._child_memory = self._child_address = 0
 *         self._child_stdin = self._child_stdout = self._child_stderr = -1
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":351
 *         self.process.set_event_proc(pt_event_handler, <void*>self)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.process
 *         del self._debugger
 */

/* Python wrapper */
static void __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_2__dealloc__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_2__dealloc__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":352
 * 
 *     def __dealloc__(self):
 *         del self.process             # <<<<<<<<<<<<<<
 *         del self._debugger
 * 
 */
  delete __pyx_v_self->process;

  /* "dmoj/cptbox/_cptbox.pyx":353
 *     def __dealloc__(self):
 *         del self.process
 *         del self._debugger             # <<<<<<<<<<<<<<
 * 
 *     def _callback(self, syscall):
 */
  delete __pyx_v_self->_debugger;

  /* "dmoj/cptbox/_cptbox.pyx":351
 *         self.process.set_event_proc(pt_event_handler, <void*>self)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.process
 *         del self._debugger
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "dmoj/cptbox/_cptbox.pyx":355
 *         del self._debugger
 * 
 *     def _callback(self, syscall):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_5_callback(PyObject *__pyx_v_self, PyObject *__pyx_v_syscall); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_5_callback(PyObject *__pyx_v_self, PyObject *__pyx_v_syscall) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_callback (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_4_callback(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_syscall));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_4_callback(CYTHON_UNUSED struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_syscall) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_callback", 0);

  /* "dmoj/cptbox/_cptbox.pyx":356
 * 
 *     def _callback(self, syscall):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     cdef int _syscall_handler(self, int syscall) with gil:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":355
 *         del self._debugger
 * 
 *     def _callback(self, syscall):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":358
 *         return False
 * 
 *     cdef int _syscall_handler(self, int syscall) with gil:             # <<<<<<<<<<<<<<
 *         return self._callback(syscall)
 * 
 */

static int __pyx_f_4dmoj_6cptbox_7_cptbox_7Process__syscall_handler(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_v_syscall) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_syscall_handler", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_self);

  /* "dmoj/cptbox/_cptbox.pyx":359
 * 
 *     cdef int _syscall_handler(self, int syscall) with gil:
 *         return self._callback(syscall)             # <<<<<<<<<<<<<<
 * 
 *     cdef int _event_handler(self, int event, unsigned long param) nogil:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_callback); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_syscall); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 359, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":358
 *         return False
 * 
 *     cdef int _syscall_handler(self, int syscall) with gil:             # <<<<<<<<<<<<<<
 *         return self._callback(syscall)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("dmoj.cptbox._cptbox.Process._syscall_handler", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":361
 *         return self._callback(syscall)
 * 
 *     cdef int _event_handler(self, int event, unsigned long param) nogil:             # <<<<<<<<<<<<<<
 *         if not PTBOX_FREEBSD and (event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL):
 *             self._max_memory = get_memory(self.process.getpid()) or self._max_memory
 */

static int __pyx_f_4dmoj_6cptbox_7_cptbox_7Process__event_handler(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_v_event, unsigned long __pyx_v_param) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned long __pyx_t_3;
  unsigned long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_event_handler", 0);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif

  /* "dmoj/cptbox/_cptbox.pyx":362
 * 
 *     cdef int _event_handler(self, int event, unsigned long param) nogil:
 *         if not PTBOX_FREEBSD and (event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL):             # <<<<<<<<<<<<<<
 *             self._max_memory = get_memory(self.process.getpid()) or self._max_memory
 *         if event == PTBOX_EVENT_PROTECTION:
 */
  /*try:*/ {
    __pyx_t_2 = ((!(PTBOX_FREEBSD != 0)) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_event == PTBOX_EVENT_EXITING) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_event == PTBOX_EVENT_SIGNAL) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_1) {

      /* "dmoj/cptbox/_cptbox.pyx":363
 *     cdef int _event_handler(self, int event, unsigned long param) nogil:
 *         if not PTBOX_FREEBSD and (event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL):
 *             self._max_memory = get_memory(self.process.getpid()) or self._max_memory             # <<<<<<<<<<<<<<
 *         if event == PTBOX_EVENT_PROTECTION:
 *             with gil:
 */
      __pyx_t_4 = __pyx_f_4dmoj_6cptbox_7_cptbox_get_memory(__pyx_v_self->process->getpid(), 0);
      if (!__pyx_t_4) {
      } else {
        __pyx_t_3 = __pyx_t_4;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_3 = __pyx_v_self->_max_memory;
      __pyx_L10_bool_binop_done:;
      __pyx_v_self->_max_memory = __pyx_t_3;

      /* "dmoj/cptbox/_cptbox.pyx":362
 * 
 *     cdef int _event_handler(self, int event, unsigned long param) nogil:
 *         if not PTBOX_FREEBSD and (event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL):             # <<<<<<<<<<<<<<
 *             self._max_memory = get_memory(self.process.getpid()) or self._max_memory
 *         if event == PTBOX_EVENT_PROTECTION:
 */
    }

    /* "dmoj/cptbox/_cptbox.pyx":364
 *         if not PTBOX_FREEBSD and (event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL):
 *             self._max_memory = get_memory(self.process.getpid()) or self._max_memory
 *         if event == PTBOX_EVENT_PROTECTION:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 self._protection_fault(param)
 */
    __pyx_t_1 = ((__pyx_v_event == PTBOX_EVENT_PROTECTION) != 0);
    if (__pyx_t_1) {

      /* "dmoj/cptbox/_cptbox.pyx":365
 *             self._max_memory = get_memory(self.process.getpid()) or self._max_memory
 *         if event == PTBOX_EVENT_PROTECTION:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 self._protection_fault(param)
 *         if event == PTBOX_EVENT_SIGNAL:
 */
      {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          /*try:*/ {

            /* "dmoj/cptbox/_cptbox.pyx":366
 *         if event == PTBOX_EVENT_PROTECTION:
 *             with gil:
 *                 self._protection_fault(param)             # <<<<<<<<<<<<<<
 *         if event == PTBOX_EVENT_SIGNAL:
 *             if param != SIGTRAP:
 */
            __pyx_t_5 = __Pyx_PyInt_From_unsigned_long(__pyx_v_param); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_6 = ((struct __pyx_vtabstruct_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self->__pyx_vtab)->_protection_fault(__pyx_v_self, __pyx_t_5, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 366, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          }

          /* "dmoj/cptbox/_cptbox.pyx":365
 *             self._max_memory = get_memory(self.process.getpid()) or self._max_memory
 *         if event == PTBOX_EVENT_PROTECTION:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 self._protection_fault(param)
 *         if event == PTBOX_EVENT_SIGNAL:
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              __Pyx_PyGILState_Release(__pyx_gilstate_save);
              #endif
              goto __pyx_L15;
            }
            __pyx_L14_error: {
              #ifdef WITH_THREAD
              __Pyx_PyGILState_Release(__pyx_gilstate_save);
              #endif
              goto __pyx_L4_error;
            }
            __pyx_L15:;
          }
      }

      /* "dmoj/cptbox/_cptbox.pyx":364
 *         if not PTBOX_FREEBSD and (event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL):
 *             self._max_memory = get_memory(self.process.getpid()) or self._max_memory
 *         if event == PTBOX_EVENT_PROTECTION:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 self._protection_fault(param)
 */
    }

    /* "dmoj/cptbox/_cptbox.pyx":367
 *             with gil:
 *                 self._protection_fault(param)
 *         if event == PTBOX_EVENT_SIGNAL:             # <<<<<<<<<<<<<<
 *             if param != SIGTRAP:
 *                 self._signal = param
 */
    __pyx_t_1 = ((__pyx_v_event == PTBOX_EVENT_SIGNAL) != 0);
    if (__pyx_t_1) {

      /* "dmoj/cptbox/_cptbox.pyx":368
 *                 self._protection_fault(param)
 *         if event == PTBOX_EVENT_SIGNAL:
 *             if param != SIGTRAP:             # <<<<<<<<<<<<<<
 *                 self._signal = param
 *             if param == SIGXCPU:
 */
      __pyx_t_1 = ((__pyx_v_param != SIGTRAP) != 0);
      if (__pyx_t_1) {

        /* "dmoj/cptbox/_cptbox.pyx":369
 *         if event == PTBOX_EVENT_SIGNAL:
 *             if param != SIGTRAP:
 *                 self._signal = param             # <<<<<<<<<<<<<<
 *             if param == SIGXCPU:
 *                 with gil:
 */
        __pyx_v_self->_signal = __pyx_v_param;

        /* "dmoj/cptbox/_cptbox.pyx":368
 *                 self._protection_fault(param)
 *         if event == PTBOX_EVENT_SIGNAL:
 *             if param != SIGTRAP:             # <<<<<<<<<<<<<<
 *                 self._signal = param
 *             if param == SIGXCPU:
 */
      }

      /* "dmoj/cptbox/_cptbox.pyx":370
 *             if param != SIGTRAP:
 *                 self._signal = param
 *             if param == SIGXCPU:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     self._cpu_time_exceeded()
 */
      __pyx_t_1 = ((__pyx_v_param == SIGXCPU) != 0);
      if (__pyx_t_1) {

        /* "dmoj/cptbox/_cptbox.pyx":371
 *                 self._signal = param
 *             if param == SIGXCPU:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     self._cpu_time_exceeded()
 *         return 0
 */
        {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            /*try:*/ {

              /* "dmoj/cptbox/_cptbox.pyx":372
 *             if param == SIGXCPU:
 *                 with gil:
 *                     self._cpu_time_exceeded()             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
              __pyx_t_6 = ((struct __pyx_vtabstruct_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self->__pyx_vtab)->_cpu_time_exceeded(__pyx_v_self, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 372, __pyx_L20_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            }

            /* "dmoj/cptbox/_cptbox.pyx":371
 *                 self._signal = param
 *             if param == SIGXCPU:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     self._cpu_time_exceeded()
 *         return 0
 */
            /*finally:*/ {
              /*normal exit:*/{
                #ifdef WITH_THREAD
                __Pyx_PyGILState_Release(__pyx_gilstate_save);
                #endif
                goto __pyx_L21;
              }
              __pyx_L20_error: {
                #ifdef WITH_THREAD
                __Pyx_PyGILState_Release(__pyx_gilstate_save);
                #endif
                goto __pyx_L4_error;
              }
              __pyx_L21:;
            }
        }

        /* "dmoj/cptbox/_cptbox.pyx":370
 *             if param != SIGTRAP:
 *                 self._signal = param
 *             if param == SIGXCPU:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     self._cpu_time_exceeded()
 */
      }

      /* "dmoj/cptbox/_cptbox.pyx":367
 *             with gil:
 *                 self._protection_fault(param)
 *         if event == PTBOX_EVENT_SIGNAL:             # <<<<<<<<<<<<<<
 *             if param != SIGTRAP:
 *                 self._signal = param
 */
    }

    /* "dmoj/cptbox/_cptbox.pyx":373
 *                 with gil:
 *                     self._cpu_time_exceeded()
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef _handler(self, syscall, handler):
 */
    __pyx_r = 0;
    goto __pyx_L3_return;
  }

  /* "dmoj/cptbox/_cptbox.pyx":362
 * 
 *     cdef int _event_handler(self, int event, unsigned long param) nogil:
 *         if not PTBOX_FREEBSD and (event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL):             # <<<<<<<<<<<<<<
 *             self._max_memory = get_memory(self.process.getpid()) or self._max_memory
 *         if event == PTBOX_EVENT_PROTECTION:
 */
  /*finally:*/ {
    __pyx_L3_return: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      goto __pyx_L0;
    }
    __pyx_L4_error: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      goto __pyx_L1_error;
    }
  }

  /* "dmoj/cptbox/_cptbox.pyx":361
 *         return self._callback(syscall)
 * 
 *     cdef int _event_handler(self, int event, unsigned long param) nogil:             # <<<<<<<<<<<<<<
 *         if not PTBOX_FREEBSD and (event == PTBOX_EVENT_EXITING or event == PTBOX_EVENT_SIGNAL):
 *             self._max_memory = get_memory(self.process.getpid()) or self._max_memory
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("dmoj.cptbox._cptbox.Process._event_handler", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":375
 *         return 0
 * 
 *     cpdef _handler(self, syscall, handler):             # <<<<<<<<<<<<<<
 *         self.process.set_handler(syscall, handler)
 * 
 */

static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_7_handler(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__handler(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_syscall, PyObject *__pyx_v_handler, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("_handler", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_handler); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_7_handler)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_syscall, __pyx_v_handler};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_syscall, __pyx_v_handler};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_INCREF(__pyx_v_syscall);
        __Pyx_GIVEREF(__pyx_v_syscall);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_syscall);
        __Pyx_INCREF(__pyx_v_handler);
        __Pyx_GIVEREF(__pyx_v_handler);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_handler);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "dmoj/cptbox/_cptbox.pyx":376
 * 
 *     cpdef _handler(self, syscall, handler):
 *         self.process.set_handler(syscall, handler)             # <<<<<<<<<<<<<<
 * 
 *     cpdef _protection_fault(self, syscall):
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_syscall); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_handler); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_v_self->process->set_handler(__pyx_t_5, __pyx_t_7);

  /* "dmoj/cptbox/_cptbox.pyx":375
 *         return 0
 * 
 *     cpdef _handler(self, syscall, handler):             # <<<<<<<<<<<<<<
 *         self.process.set_handler(syscall, handler)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._handler", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_7_handler(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_7_handler(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_syscall = 0;
  PyObject *__pyx_v_handler = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_handler (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_syscall,&__pyx_n_s_handler_2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_syscall)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handler_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_handler", 1, 2, 2, 1); __PYX_ERR(0, 375, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_handler") < 0)) __PYX_ERR(0, 375, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_syscall = values[0];
    __pyx_v_handler = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_handler", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 375, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._handler", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_6_handler(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), __pyx_v_syscall, __pyx_v_handler);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_6_handler(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_syscall, PyObject *__pyx_v_handler) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_handler", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4dmoj_6cptbox_7_cptbox_7Process__handler(__pyx_v_self, __pyx_v_syscall, __pyx_v_handler, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._handler", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":378
 *         self.process.set_handler(syscall, handler)
 * 
 *     cpdef _protection_fault(self, syscall):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_9_protection_fault(PyObject *__pyx_v_self, PyObject *__pyx_v_syscall); /*proto*/
static PyObject *__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__protection_fault(CYTHON_UNUSED struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_syscall, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_protection_fault", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_protection_fault); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_9_protection_fault)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_syscall); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_syscall};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_syscall};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 378, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(__pyx_v_syscall);
          __Pyx_GIVEREF(__pyx_v_syscall);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_syscall);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "dmoj/cptbox/_cptbox.pyx":379
 * 
 *     cpdef _protection_fault(self, syscall):
 *         pass             # <<<<<<<<<<<<<<
 * 
 *     cpdef _cpu_time_exceeded(self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._protection_fault", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":378
 *         self.process.set_handler(syscall, handler)
 * 
 *     cpdef _protection_fault(self, syscall):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_9_protection_fault(PyObject *__pyx_v_self, PyObject *__pyx_v_syscall); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_9_protection_fault(PyObject *__pyx_v_self, PyObject *__pyx_v_syscall) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_protection_fault (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8_protection_fault(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_syscall));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8_protection_fault(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_syscall) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_protection_fault", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4dmoj_6cptbox_7_cptbox_7Process__protection_fault(__pyx_v_self, __pyx_v_syscall, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._protection_fault", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":381
 *         pass
 * 
 *     cpdef _cpu_time_exceeded(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_11_cpu_time_exceeded(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__cpu_time_exceeded(CYTHON_UNUSED struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_cpu_time_exceeded", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cpu_time_exceeded); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_11_cpu_time_exceeded)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "dmoj/cptbox/_cptbox.pyx":382
 * 
 *     cpdef _cpu_time_exceeded(self):
 *         pass             # <<<<<<<<<<<<<<
 * 
 *     cpdef _spawn(self, file, args, env=(), chdir='', fds=None):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._cpu_time_exceeded", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":381
 *         pass
 * 
 *     cpdef _cpu_time_exceeded(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_11_cpu_time_exceeded(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_11_cpu_time_exceeded(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cpu_time_exceeded (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_10_cpu_time_exceeded(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_10_cpu_time_exceeded(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_cpu_time_exceeded", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4dmoj_6cptbox_7_cptbox_7Process__cpu_time_exceeded(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._cpu_time_exceeded", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":384
 *         pass
 * 
 *     cpdef _spawn(self, file, args, env=(), chdir='', fds=None):             # <<<<<<<<<<<<<<
 *         cdef child_config config
 *         config.address_space = self._child_address
 */

static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_spawn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__spawn(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_file, PyObject *__pyx_v_args, int __pyx_skip_dispatch, struct __pyx_opt_args_4dmoj_6cptbox_7_cptbox_7Process__spawn *__pyx_optional_args) {
  PyObject *__pyx_v_env = ((PyObject *)__pyx_empty_tuple);
  PyObject *__pyx_v_chdir = ((PyObject *)__pyx_kp_s__4);
  PyObject *__pyx_v_fds = ((PyObject *)Py_None);
  struct child_config __pyx_v_config;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  unsigned long __pyx_t_7;
  unsigned int __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  __Pyx_RefNannySetupContext("_spawn", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_env = __pyx_optional_args->env;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_chdir = __pyx_optional_args->chdir;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_fds = __pyx_optional_args->fds;
        }
      }
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_spawn); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_spawn)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[6] = {__pyx_t_4, __pyx_v_file, __pyx_v_args, __pyx_v_env, __pyx_v_chdir, __pyx_v_fds};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[6] = {__pyx_t_4, __pyx_v_file, __pyx_v_args, __pyx_v_env, __pyx_v_chdir, __pyx_v_fds};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 384, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_INCREF(__pyx_v_file);
        __Pyx_GIVEREF(__pyx_v_file);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_file);
        __Pyx_INCREF(__pyx_v_args);
        __Pyx_GIVEREF(__pyx_v_args);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_args);
        __Pyx_INCREF(__pyx_v_env);
        __Pyx_GIVEREF(__pyx_v_env);
        PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_env);
        __Pyx_INCREF(__pyx_v_chdir);
        __Pyx_GIVEREF(__pyx_v_chdir);
        PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_chdir);
        __Pyx_INCREF(__pyx_v_fds);
        __Pyx_GIVEREF(__pyx_v_fds);
        PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, __pyx_v_fds);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "dmoj/cptbox/_cptbox.pyx":386
 *     cpdef _spawn(self, file, args, env=(), chdir='', fds=None):
 *         cdef child_config config
 *         config.address_space = self._child_address             # <<<<<<<<<<<<<<
 *         config.memory = self._child_memory
 *         config.cpu_time = self._cpu_time
 */
  __pyx_t_7 = __pyx_v_self->_child_address;
  __pyx_v_config.address_space = __pyx_t_7;

  /* "dmoj/cptbox/_cptbox.pyx":387
 *         cdef child_config config
 *         config.address_space = self._child_address
 *         config.memory = self._child_memory             # <<<<<<<<<<<<<<
 *         config.cpu_time = self._cpu_time
 *         config.nproc = self._nproc
 */
  __pyx_t_7 = __pyx_v_self->_child_memory;
  __pyx_v_config.memory = __pyx_t_7;

  /* "dmoj/cptbox/_cptbox.pyx":388
 *         config.address_space = self._child_address
 *         config.memory = self._child_memory
 *         config.cpu_time = self._cpu_time             # <<<<<<<<<<<<<<
 *         config.nproc = self._nproc
 *         config.personality = self._child_personality
 */
  __pyx_t_8 = __pyx_v_self->_cpu_time;
  __pyx_v_config.cpu_time = __pyx_t_8;

  /* "dmoj/cptbox/_cptbox.pyx":389
 *         config.memory = self._child_memory
 *         config.cpu_time = self._cpu_time
 *         config.nproc = self._nproc             # <<<<<<<<<<<<<<
 *         config.personality = self._child_personality
 *         config.file = file
 */
  __pyx_t_5 = __pyx_v_self->_nproc;
  __pyx_v_config.nproc = __pyx_t_5;

  /* "dmoj/cptbox/_cptbox.pyx":390
 *         config.cpu_time = self._cpu_time
 *         config.nproc = self._nproc
 *         config.personality = self._child_personality             # <<<<<<<<<<<<<<
 *         config.file = file
 *         config.dir = chdir
 */
  __pyx_t_7 = __pyx_v_self->_child_personality;
  __pyx_v_config.personality = __pyx_t_7;

  /* "dmoj/cptbox/_cptbox.pyx":391
 *         config.nproc = self._nproc
 *         config.personality = self._child_personality
 *         config.file = file             # <<<<<<<<<<<<<<
 *         config.dir = chdir
 *         config.stdin_ = self._child_stdin
 */
  __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_file); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 391, __pyx_L1_error)
  __pyx_v_config.file = __pyx_t_9;

  /* "dmoj/cptbox/_cptbox.pyx":392
 *         config.personality = self._child_personality
 *         config.file = file
 *         config.dir = chdir             # <<<<<<<<<<<<<<
 *         config.stdin_ = self._child_stdin
 *         config.stdout_ = self._child_stdout
 */
  __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_chdir); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 392, __pyx_L1_error)
  __pyx_v_config.dir = __pyx_t_9;

  /* "dmoj/cptbox/_cptbox.pyx":393
 *         config.file = file
 *         config.dir = chdir
 *         config.stdin_ = self._child_stdin             # <<<<<<<<<<<<<<
 *         config.stdout_ = self._child_stdout
 *         config.stderr_ = self._child_stderr
 */
  __pyx_t_5 = __pyx_v_self->_child_stdin;
  __pyx_v_config.stdin_ = __pyx_t_5;

  /* "dmoj/cptbox/_cptbox.pyx":394
 *         config.dir = chdir
 *         config.stdin_ = self._child_stdin
 *         config.stdout_ = self._child_stdout             # <<<<<<<<<<<<<<
 *         config.stderr_ = self._child_stderr
 *         config.argv = alloc_string_array(args)
 */
  __pyx_t_5 = __pyx_v_self->_child_stdout;
  __pyx_v_config.stdout_ = __pyx_t_5;

  /* "dmoj/cptbox/_cptbox.pyx":395
 *         config.stdin_ = self._child_stdin
 *         config.stdout_ = self._child_stdout
 *         config.stderr_ = self._child_stderr             # <<<<<<<<<<<<<<
 *         config.argv = alloc_string_array(args)
 *         config.envp = alloc_string_array(env)
 */
  __pyx_t_5 = __pyx_v_self->_child_stderr;
  __pyx_v_config.stderr_ = __pyx_t_5;

  /* "dmoj/cptbox/_cptbox.pyx":396
 *         config.stdout_ = self._child_stdout
 *         config.stderr_ = self._child_stderr
 *         config.argv = alloc_string_array(args)             # <<<<<<<<<<<<<<
 *         config.envp = alloc_string_array(env)
 *         if fds is None or not len(fds):
 */
  __pyx_v_config.argv = __pyx_f_4dmoj_6cptbox_7_cptbox_alloc_string_array(__pyx_v_args);

  /* "dmoj/cptbox/_cptbox.pyx":397
 *         config.stderr_ = self._child_stderr
 *         config.argv = alloc_string_array(args)
 *         config.envp = alloc_string_array(env)             # <<<<<<<<<<<<<<
 *         if fds is None or not len(fds):
 *             config.max_fd = 2
 */
  __pyx_v_config.envp = __pyx_f_4dmoj_6cptbox_7_cptbox_alloc_string_array(__pyx_v_env);

  /* "dmoj/cptbox/_cptbox.pyx":398
 *         config.argv = alloc_string_array(args)
 *         config.envp = alloc_string_array(env)
 *         if fds is None or not len(fds):             # <<<<<<<<<<<<<<
 *             config.max_fd = 2
 *             config.fds = NULL
 */
  __pyx_t_11 = (__pyx_v_fds == Py_None);
  __pyx_t_12 = (__pyx_t_11 != 0);
  if (!__pyx_t_12) {
  } else {
    __pyx_t_10 = __pyx_t_12;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_13 = PyObject_Length(__pyx_v_fds); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 398, __pyx_L1_error)
  __pyx_t_12 = ((!(__pyx_t_13 != 0)) != 0);
  __pyx_t_10 = __pyx_t_12;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_10) {

    /* "dmoj/cptbox/_cptbox.pyx":399
 *         config.envp = alloc_string_array(env)
 *         if fds is None or not len(fds):
 *             config.max_fd = 2             # <<<<<<<<<<<<<<
 *             config.fds = NULL
 *         else:
 */
    __pyx_v_config.max_fd = 2;

    /* "dmoj/cptbox/_cptbox.pyx":400
 *         if fds is None or not len(fds):
 *             config.max_fd = 2
 *             config.fds = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             config.max_fd = 2 + len(fds)
 */
    __pyx_v_config.fds = NULL;

    /* "dmoj/cptbox/_cptbox.pyx":398
 *         config.argv = alloc_string_array(args)
 *         config.envp = alloc_string_array(env)
 *         if fds is None or not len(fds):             # <<<<<<<<<<<<<<
 *             config.max_fd = 2
 *             config.fds = NULL
 */
    goto __pyx_L3;
  }

  /* "dmoj/cptbox/_cptbox.pyx":402
 *             config.fds = NULL
 *         else:
 *             config.max_fd = 2 + len(fds)             # <<<<<<<<<<<<<<
 *             config.fds = <int*>malloc(sizeof(int) * len(fds))
 *             for i in xrange(len(fds)):
 */
  /*else*/ {
    __pyx_t_13 = PyObject_Length(__pyx_v_fds); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 402, __pyx_L1_error)
    __pyx_v_config.max_fd = (2 + __pyx_t_13);

    /* "dmoj/cptbox/_cptbox.pyx":403
 *         else:
 *             config.max_fd = 2 + len(fds)
 *             config.fds = <int*>malloc(sizeof(int) * len(fds))             # <<<<<<<<<<<<<<
 *             for i in xrange(len(fds)):
 *                 config.fds[i] = fds[i]
 */
    __pyx_t_13 = PyObject_Length(__pyx_v_fds); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 403, __pyx_L1_error)
    __pyx_v_config.fds = ((int *)malloc(((sizeof(int)) * __pyx_t_13)));

    /* "dmoj/cptbox/_cptbox.pyx":404
 *             config.max_fd = 2 + len(fds)
 *             config.fds = <int*>malloc(sizeof(int) * len(fds))
 *             for i in xrange(len(fds)):             # <<<<<<<<<<<<<<
 *                 config.fds[i] = fds[i]
 *         with nogil:
 */
    __pyx_t_13 = PyObject_Length(__pyx_v_fds); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 404, __pyx_L1_error)
    for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
      __pyx_v_i = __pyx_t_14;

      /* "dmoj/cptbox/_cptbox.pyx":405
 *             config.fds = <int*>malloc(sizeof(int) * len(fds))
 *             for i in xrange(len(fds)):
 *                 config.fds[i] = fds[i]             # <<<<<<<<<<<<<<
 *         with nogil:
 *             if self.process.spawn(pt_child, &config):
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_fds, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      (__pyx_v_config.fds[__pyx_v_i]) = __pyx_t_5;
    }
  }
  __pyx_L3:;

  /* "dmoj/cptbox/_cptbox.pyx":406
 *             for i in xrange(len(fds)):
 *                 config.fds[i] = fds[i]
 *         with nogil:             # <<<<<<<<<<<<<<
 *             if self.process.spawn(pt_child, &config):
 *                 with gil:
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "dmoj/cptbox/_cptbox.pyx":407
 *                 config.fds[i] = fds[i]
 *         with nogil:
 *             if self.process.spawn(pt_child, &config):             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     raise RuntimeError('failed to spawn child')
 */
        __pyx_t_10 = (__pyx_v_self->process->spawn(__pyx_f_4dmoj_6cptbox_7_cptbox_pt_child, (&__pyx_v_config)) != 0);
        if (__pyx_t_10) {

          /* "dmoj/cptbox/_cptbox.pyx":408
 *         with nogil:
 *             if self.process.spawn(pt_child, &config):
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError('failed to spawn child')
 *         free(config.argv)
 */
          {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
              #endif
              /*try:*/ {

                /* "dmoj/cptbox/_cptbox.pyx":409
 *             if self.process.spawn(pt_child, &config):
 *                 with gil:
 *                     raise RuntimeError('failed to spawn child')             # <<<<<<<<<<<<<<
 *         free(config.argv)
 *         free(config.envp)
 */
                __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_Raise(__pyx_t_1, 0, 0, 0);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __PYX_ERR(0, 409, __pyx_L13_error)
              }

              /* "dmoj/cptbox/_cptbox.pyx":408
 *         with nogil:
 *             if self.process.spawn(pt_child, &config):
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError('failed to spawn child')
 *         free(config.argv)
 */
              /*finally:*/ {
                __pyx_L13_error: {
                  #ifdef WITH_THREAD
                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  goto __pyx_L9_error;
                }
              }
          }

          /* "dmoj/cptbox/_cptbox.pyx":407
 *                 config.fds[i] = fds[i]
 *         with nogil:
 *             if self.process.spawn(pt_child, &config):             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     raise RuntimeError('failed to spawn child')
 */
        }
      }

      /* "dmoj/cptbox/_cptbox.pyx":406
 *             for i in xrange(len(fds)):
 *                 config.fds[i] = fds[i]
 *         with nogil:             # <<<<<<<<<<<<<<
 *             if self.process.spawn(pt_child, &config):
 *                 with gil:
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L10;
        }
        __pyx_L9_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L10:;
      }
  }

  /* "dmoj/cptbox/_cptbox.pyx":410
 *                 with gil:
 *                     raise RuntimeError('failed to spawn child')
 *         free(config.argv)             # <<<<<<<<<<<<<<
 *         free(config.envp)
 * 
 */
  free(__pyx_v_config.argv);

  /* "dmoj/cptbox/_cptbox.pyx":411
 *                     raise RuntimeError('failed to spawn child')
 *         free(config.argv)
 *         free(config.envp)             # <<<<<<<<<<<<<<
 * 
 *     cpdef _monitor(self):
 */
  free(__pyx_v_config.envp);

  /* "dmoj/cptbox/_cptbox.pyx":384
 *         pass
 * 
 *     cpdef _spawn(self, file, args, env=(), chdir='', fds=None):             # <<<<<<<<<<<<<<
 *         cdef child_config config
 *         config.address_space = self._child_address
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._spawn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_spawn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_spawn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_env = 0;
  PyObject *__pyx_v_chdir = 0;
  PyObject *__pyx_v_fds = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_spawn (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file,&__pyx_n_s_args,&__pyx_n_s_env,&__pyx_n_s_chdir,&__pyx_n_s_fds,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[2] = ((PyObject *)__pyx_empty_tuple);
    values[3] = ((PyObject *)__pyx_kp_s__4);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_spawn", 0, 2, 5, 1); __PYX_ERR(0, 384, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_env);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chdir);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fds);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_spawn") < 0)) __PYX_ERR(0, 384, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file = values[0];
    __pyx_v_args = values[1];
    __pyx_v_env = values[2];
    __pyx_v_chdir = values[3];
    __pyx_v_fds = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_spawn", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 384, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._spawn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_12_spawn(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), __pyx_v_file, __pyx_v_args, __pyx_v_env, __pyx_v_chdir, __pyx_v_fds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_12_spawn(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_file, PyObject *__pyx_v_args, PyObject *__pyx_v_env, PyObject *__pyx_v_chdir, PyObject *__pyx_v_fds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4dmoj_6cptbox_7_cptbox_7Process__spawn __pyx_t_2;
  __Pyx_RefNannySetupContext("_spawn", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.env = __pyx_v_env;
  __pyx_t_2.chdir = __pyx_v_chdir;
  __pyx_t_2.fds = __pyx_v_fds;
  __pyx_t_1 = __pyx_vtabptr_4dmoj_6cptbox_7_cptbox_Process->_spawn(__pyx_v_self, __pyx_v_file, __pyx_v_args, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._spawn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":413
 *         free(config.envp)
 * 
 *     cpdef _monitor(self):             # <<<<<<<<<<<<<<
 *         cdef int exitcode
 *         with nogil:
 */

static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15_monitor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__monitor(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_v_exitcode;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_monitor", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_monitor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15_monitor)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "dmoj/cptbox/_cptbox.pyx":415
 *     cpdef _monitor(self):
 *         cdef int exitcode
 *         with nogil:             # <<<<<<<<<<<<<<
 *             exitcode = self.process.monitor()
 *         self._exitcode = exitcode
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "dmoj/cptbox/_cptbox.pyx":416
 *         cdef int exitcode
 *         with nogil:
 *             exitcode = self.process.monitor()             # <<<<<<<<<<<<<<
 *         self._exitcode = exitcode
 *         self._exited = True
 */
        __pyx_v_exitcode = __pyx_v_self->process->monitor();
      }

      /* "dmoj/cptbox/_cptbox.pyx":415
 *     cpdef _monitor(self):
 *         cdef int exitcode
 *         with nogil:             # <<<<<<<<<<<<<<
 *             exitcode = self.process.monitor()
 *         self._exitcode = exitcode
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "dmoj/cptbox/_cptbox.pyx":417
 *         with nogil:
 *             exitcode = self.process.monitor()
 *         self._exitcode = exitcode             # <<<<<<<<<<<<<<
 *         self._exited = True
 *         return self._exitcode
 */
  __pyx_v_self->_exitcode = __pyx_v_exitcode;

  /* "dmoj/cptbox/_cptbox.pyx":418
 *             exitcode = self.process.monitor()
 *         self._exitcode = exitcode
 *         self._exited = True             # <<<<<<<<<<<<<<
 *         return self._exitcode
 * 
 */
  __pyx_v_self->_exited = 1;

  /* "dmoj/cptbox/_cptbox.pyx":419
 *         self._exitcode = exitcode
 *         self._exited = True
 *         return self._exitcode             # <<<<<<<<<<<<<<
 * 
 *     property was_initialized:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_exitcode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":413
 *         free(config.envp)
 * 
 *     cpdef _monitor(self):             # <<<<<<<<<<<<<<
 *         cdef int exitcode
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._monitor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15_monitor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15_monitor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_monitor (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_14_monitor(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_14_monitor(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_monitor", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4dmoj_6cptbox_7_cptbox_7Process__monitor(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._monitor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":422
 * 
 *     property was_initialized:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.process.was_initialized()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15was_initialized_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15was_initialized_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_15was_initialized___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_15was_initialized___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":423
 *     property was_initialized:
 *         def __get__(self):
 *             return self.process.was_initialized()             # <<<<<<<<<<<<<<
 * 
 *     property _trace_syscalls:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->process->was_initialized()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":422
 * 
 *     property was_initialized:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.process.was_initialized()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process.was_initialized.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":426
 * 
 *     property _trace_syscalls:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.process.trace_syscalls()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15_trace_syscalls_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15_trace_syscalls_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_15_trace_syscalls___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_15_trace_syscalls___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":427
 *     property _trace_syscalls:
 *         def __get__(self):
 *             return self.process.trace_syscalls()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, bint value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->process->trace_syscalls()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":426
 * 
 *     property _trace_syscalls:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.process.trace_syscalls()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._trace_syscalls.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":429
 *             return self.process.trace_syscalls()
 * 
 *         def __set__(self, bint value):             # <<<<<<<<<<<<<<
 *             self.process.trace_syscalls(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15_trace_syscalls_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15_trace_syscalls_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 429, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._trace_syscalls.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_15_trace_syscalls_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((int)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_15_trace_syscalls_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, int __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":430
 * 
 *         def __set__(self, bint value):
 *             self.process.trace_syscalls(value)             # <<<<<<<<<<<<<<
 * 
 *     property pid:
 */
  __pyx_v_self->process->trace_syscalls(__pyx_v_value);

  /* "dmoj/cptbox/_cptbox.pyx":429
 *             return self.process.trace_syscalls()
 * 
 *         def __set__(self, bint value):             # <<<<<<<<<<<<<<
 *             self.process.trace_syscalls(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":433
 * 
 *     property pid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.process.getpid()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_3pid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_3pid_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_3pid___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_3pid___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":434
 *     property pid:
 *         def __get__(self):
 *             return self.process.getpid()             # <<<<<<<<<<<<<<
 * 
 *     property execution_time:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->process->getpid()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":433
 * 
 *     property pid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.process.getpid()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process.pid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":437
 * 
 *     property execution_time:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.process.execution_time()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_14execution_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_14execution_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_14execution_time___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_14execution_time___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":438
 *     property execution_time:
 *         def __get__(self):
 *             return self.process.execution_time()             # <<<<<<<<<<<<<<
 * 
 *     property wall_clock_time:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->process->execution_time()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":437
 * 
 *     property execution_time:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.process.execution_time()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process.execution_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":441
 * 
 *     property wall_clock_time:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.process.wall_clock_time()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15wall_clock_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15wall_clock_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_15wall_clock_time___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_15wall_clock_time___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":442
 *     property wall_clock_time:
 *         def __get__(self):
 *             return self.process.wall_clock_time()             # <<<<<<<<<<<<<<
 * 
 *     property cpu_time:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->process->wall_clock_time()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":441
 * 
 *     property wall_clock_time:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.process.wall_clock_time()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process.wall_clock_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":445
 * 
 *     property cpu_time:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef const rusage *usage = self.process.getrusage()
 *             return usage.ru_utime.tv_sec + usage.ru_utime.tv_usec / 1000000.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_8cpu_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_8cpu_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8cpu_time___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8cpu_time___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  struct rusage const *__pyx_v_usage;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":446
 *     property cpu_time:
 *         def __get__(self):
 *             cdef const rusage *usage = self.process.getrusage()             # <<<<<<<<<<<<<<
 *             return usage.ru_utime.tv_sec + usage.ru_utime.tv_usec / 1000000.
 * 
 */
  __pyx_v_usage = __pyx_v_self->process->getrusage();

  /* "dmoj/cptbox/_cptbox.pyx":447
 *         def __get__(self):
 *             cdef const rusage *usage = self.process.getrusage()
 *             return usage.ru_utime.tv_sec + usage.ru_utime.tv_usec / 1000000.             # <<<<<<<<<<<<<<
 * 
 *     property max_memory:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_usage->ru_utime.tv_sec + (__pyx_v_usage->ru_utime.tv_usec / 1000000.))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":445
 * 
 *     property cpu_time:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef const rusage *usage = self.process.getrusage()
 *             return usage.ru_utime.tv_sec + usage.ru_utime.tv_usec / 1000000.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process.cpu_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":450
 * 
 *     property max_memory:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if PTBOX_FREEBSD:
 *                 return self.process.getrusage().ru_maxrss
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_10max_memory_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_10max_memory_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_10max_memory___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_10max_memory___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  unsigned long __pyx_v_memory;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":451
 *     property max_memory:
 *         def __get__(self):
 *             if PTBOX_FREEBSD:             # <<<<<<<<<<<<<<
 *                 return self.process.getrusage().ru_maxrss
 *             if self._exited:
 */
  __pyx_t_1 = (PTBOX_FREEBSD != 0);
  if (__pyx_t_1) {

    /* "dmoj/cptbox/_cptbox.pyx":452
 *         def __get__(self):
 *             if PTBOX_FREEBSD:
 *                 return self.process.getrusage().ru_maxrss             # <<<<<<<<<<<<<<
 *             if self._exited:
 *                 return self._max_memory or self.process.getrusage().ru_maxrss
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->process->getrusage()->ru_maxrss); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dmoj/cptbox/_cptbox.pyx":451
 *     property max_memory:
 *         def __get__(self):
 *             if PTBOX_FREEBSD:             # <<<<<<<<<<<<<<
 *                 return self.process.getrusage().ru_maxrss
 *             if self._exited:
 */
  }

  /* "dmoj/cptbox/_cptbox.pyx":453
 *             if PTBOX_FREEBSD:
 *                 return self.process.getrusage().ru_maxrss
 *             if self._exited:             # <<<<<<<<<<<<<<
 *                 return self._max_memory or self.process.getrusage().ru_maxrss
 *             cdef unsigned long memory = get_memory(self.process.getpid())
 */
  __pyx_t_1 = (__pyx_v_self->_exited != 0);
  if (__pyx_t_1) {

    /* "dmoj/cptbox/_cptbox.pyx":454
 *                 return self.process.getrusage().ru_maxrss
 *             if self._exited:
 *                 return self._max_memory or self.process.getrusage().ru_maxrss             # <<<<<<<<<<<<<<
 *             cdef unsigned long memory = get_memory(self.process.getpid())
 *             if memory > 0:
 */
    __Pyx_XDECREF(__pyx_r);
    if (!__pyx_v_self->_max_memory) {
    } else {
      __pyx_t_3 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->_max_memory); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_4 = __pyx_v_self->process->getrusage()->ru_maxrss;
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_L5_bool_binop_done:;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dmoj/cptbox/_cptbox.pyx":453
 *             if PTBOX_FREEBSD:
 *                 return self.process.getrusage().ru_maxrss
 *             if self._exited:             # <<<<<<<<<<<<<<
 *                 return self._max_memory or self.process.getrusage().ru_maxrss
 *             cdef unsigned long memory = get_memory(self.process.getpid())
 */
  }

  /* "dmoj/cptbox/_cptbox.pyx":455
 *             if self._exited:
 *                 return self._max_memory or self.process.getrusage().ru_maxrss
 *             cdef unsigned long memory = get_memory(self.process.getpid())             # <<<<<<<<<<<<<<
 *             if memory > 0:
 *                 self._max_memory = memory
 */
  __pyx_v_memory = __pyx_f_4dmoj_6cptbox_7_cptbox_get_memory(__pyx_v_self->process->getpid(), 0);

  /* "dmoj/cptbox/_cptbox.pyx":456
 *                 return self._max_memory or self.process.getrusage().ru_maxrss
 *             cdef unsigned long memory = get_memory(self.process.getpid())
 *             if memory > 0:             # <<<<<<<<<<<<<<
 *                 self._max_memory = memory
 *             return self._max_memory or self.process.getrusage().ru_maxrss
 */
  __pyx_t_1 = ((__pyx_v_memory > 0) != 0);
  if (__pyx_t_1) {

    /* "dmoj/cptbox/_cptbox.pyx":457
 *             cdef unsigned long memory = get_memory(self.process.getpid())
 *             if memory > 0:
 *                 self._max_memory = memory             # <<<<<<<<<<<<<<
 *             return self._max_memory or self.process.getrusage().ru_maxrss
 * 
 */
    __pyx_v_self->_max_memory = __pyx_v_memory;

    /* "dmoj/cptbox/_cptbox.pyx":456
 *                 return self._max_memory or self.process.getrusage().ru_maxrss
 *             cdef unsigned long memory = get_memory(self.process.getpid())
 *             if memory > 0:             # <<<<<<<<<<<<<<
 *                 self._max_memory = memory
 *             return self._max_memory or self.process.getrusage().ru_maxrss
 */
  }

  /* "dmoj/cptbox/_cptbox.pyx":458
 *             if memory > 0:
 *                 self._max_memory = memory
 *             return self._max_memory or self.process.getrusage().ru_maxrss             # <<<<<<<<<<<<<<
 * 
 *     property signal:
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_self->_max_memory) {
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->_max_memory); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_4 = __pyx_v_self->process->getrusage()->ru_maxrss;
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_L8_bool_binop_done:;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":450
 * 
 *     property max_memory:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if PTBOX_FREEBSD:
 *                 return self.process.getrusage().ru_maxrss
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process.max_memory.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":461
 * 
 *     property signal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._exited:
 *                 return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_6signal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_6signal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_6signal___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_6signal___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":462
 *     property signal:
 *         def __get__(self):
 *             if not self._exited:             # <<<<<<<<<<<<<<
 *                 return None
 *             return self._signal if self.was_initialized else 0
 */
  __pyx_t_1 = ((!(__pyx_v_self->_exited != 0)) != 0);
  if (__pyx_t_1) {

    /* "dmoj/cptbox/_cptbox.pyx":463
 *         def __get__(self):
 *             if not self._exited:
 *                 return None             # <<<<<<<<<<<<<<
 *             return self._signal if self.was_initialized else 0
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "dmoj/cptbox/_cptbox.pyx":462
 *     property signal:
 *         def __get__(self):
 *             if not self._exited:             # <<<<<<<<<<<<<<
 *                 return None
 *             return self._signal if self.was_initialized else 0
 */
  }

  /* "dmoj/cptbox/_cptbox.pyx":464
 *             if not self._exited:
 *                 return None
 *             return self._signal if self.was_initialized else 0             # <<<<<<<<<<<<<<
 * 
 *     property returncode:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_was_initialized); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_signal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_2 = __pyx_int_0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":461
 * 
 *     property signal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._exited:
 *                 return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process.signal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":467
 * 
 *     property returncode:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._exited:
 *                 return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_10returncode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_10returncode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_10returncode___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_10returncode___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dmoj/cptbox/_cptbox.pyx":468
 *     property returncode:
 *         def __get__(self):
 *             if not self._exited:             # <<<<<<<<<<<<<<
 *                 return None
 *             return self._exitcode
 */
  __pyx_t_1 = ((!(__pyx_v_self->_exited != 0)) != 0);
  if (__pyx_t_1) {

    /* "dmoj/cptbox/_cptbox.pyx":469
 *         def __get__(self):
 *             if not self._exited:
 *                 return None             # <<<<<<<<<<<<<<
 *             return self._exitcode
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "dmoj/cptbox/_cptbox.pyx":468
 *     property returncode:
 *         def __get__(self):
 *             if not self._exited:             # <<<<<<<<<<<<<<
 *                 return None
 *             return self._exitcode
 */
  }

  /* "dmoj/cptbox/_cptbox.pyx":470
 *             if not self._exited:
 *                 return None
 *             return self._exitcode             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_exitcode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dmoj/cptbox/_cptbox.pyx":467
 * 
 *     property returncode:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._exited:
 *                 return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process.returncode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":322
 *     cdef pt_debugger *_debugger
 *     cdef pt_process *process
 *     cdef public Debugger debugger             # <<<<<<<<<<<<<<
 *     cdef readonly bint _exited
 *     cdef readonly int _exitcode
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_8debugger_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_8debugger_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8debugger___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8debugger___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->debugger));
  __pyx_r = ((PyObject *)__pyx_v_self->debugger);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_8debugger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_8debugger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8debugger_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8debugger_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_4dmoj_6cptbox_7_cptbox_Debugger))))) __PYX_ERR(0, 322, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->debugger);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->debugger));
  __pyx_v_self->debugger = ((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process.debugger.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_8debugger_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_8debugger_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8debugger_4__del__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_8debugger_4__del__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->debugger);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->debugger));
  __pyx_v_self->debugger = ((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":323
 *     cdef pt_process *process
 *     cdef public Debugger debugger
 *     cdef readonly bint _exited             # <<<<<<<<<<<<<<
 *     cdef readonly int _exitcode
 *     cdef unsigned int _signal
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_7_exited_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_7_exited_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_7_exited___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_7_exited___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_exited); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._exited.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":324
 *     cdef public Debugger debugger
 *     cdef readonly bint _exited
 *     cdef readonly int _exitcode             # <<<<<<<<<<<<<<
 *     cdef unsigned int _signal
 *     cdef public int _child_stdin, _child_stdout, _child_stderr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_9_exitcode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_9_exitcode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_9_exitcode___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_9_exitcode___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_exitcode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._exitcode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":326
 *     cdef readonly int _exitcode
 *     cdef unsigned int _signal
 *     cdef public int _child_stdin, _child_stdout, _child_stderr             # <<<<<<<<<<<<<<
 *     cdef public unsigned long _child_memory, _child_address, _child_personality
 *     cdef public unsigned int _cpu_time
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_12_child_stdin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_12_child_stdin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_12_child_stdin___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_12_child_stdin___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_child_stdin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._child_stdin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_12_child_stdin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_12_child_stdin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_12_child_stdin_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_12_child_stdin_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 326, __pyx_L1_error)
  __pyx_v_self->_child_stdin = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._child_stdin.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_stdout_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_stdout_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_stdout___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_stdout___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_child_stdout); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._child_stdout.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_stdout_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_stdout_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_stdout_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_stdout_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 326, __pyx_L1_error)
  __pyx_v_self->_child_stdout = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._child_stdout.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_stderr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_stderr_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_stderr___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_stderr___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_child_stderr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._child_stderr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_stderr_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_stderr_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_stderr_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_stderr_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 326, __pyx_L1_error)
  __pyx_v_self->_child_stderr = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._child_stderr.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":327
 *     cdef unsigned int _signal
 *     cdef public int _child_stdin, _child_stdout, _child_stderr
 *     cdef public unsigned long _child_memory, _child_address, _child_personality             # <<<<<<<<<<<<<<
 *     cdef public unsigned int _cpu_time
 *     cdef public int _nproc
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_memory_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_memory_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_memory___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_memory___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->_child_memory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._child_memory.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_memory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_memory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_memory_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_13_child_memory_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L1_error)
  __pyx_v_self->_child_memory = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._child_memory.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_14_child_address_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_14_child_address_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_14_child_address___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_14_child_address___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->_child_address); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._child_address.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_14_child_address_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_14_child_address_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_14_child_address_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_14_child_address_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L1_error)
  __pyx_v_self->_child_address = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._child_address.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_18_child_personality_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_18_child_personality_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_18_child_personality___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_18_child_personality___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->_child_personality); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._child_personality.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_18_child_personality_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_18_child_personality_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_18_child_personality_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_18_child_personality_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L1_error)
  __pyx_v_self->_child_personality = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._child_personality.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":328
 *     cdef public int _child_stdin, _child_stdout, _child_stderr
 *     cdef public unsigned long _child_memory, _child_address, _child_personality
 *     cdef public unsigned int _cpu_time             # <<<<<<<<<<<<<<
 *     cdef public int _nproc
 *     cdef unsigned long _max_memory
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_9_cpu_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_9_cpu_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_9_cpu_time___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_9_cpu_time___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_cpu_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._cpu_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_9_cpu_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_9_cpu_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_9_cpu_time_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_9_cpu_time_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L1_error)
  __pyx_v_self->_cpu_time = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._cpu_time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dmoj/cptbox/_cptbox.pyx":329
 *     cdef public unsigned long _child_memory, _child_address, _child_personality
 *     cdef public unsigned int _cpu_time
 *     cdef public int _nproc             # <<<<<<<<<<<<<<
 *     cdef unsigned long _max_memory
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_6_nproc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_6_nproc_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_6_nproc___get__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_6_nproc___get__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_nproc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._nproc.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_6_nproc_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_6_nproc_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_6_nproc_2__set__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_6_nproc_2__set__(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L1_error)
  __pyx_v_self->_nproc = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process._nproc.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_16__reduce_cython__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_18__setstate_cython__(((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4dmoj_6cptbox_7_cptbox_7Process_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dmoj.cptbox._cptbox.Process.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_4dmoj_6cptbox_7_cptbox_Debugger __pyx_vtable_4dmoj_6cptbox_7_cptbox_Debugger;

static PyObject *__pyx_tp_new_4dmoj_6cptbox_7_cptbox_Debugger(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)o);
  p->__pyx_vtab = __pyx_vtabptr_4dmoj_6cptbox_7_cptbox_Debugger;
  p->on_return_callback = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4dmoj_6cptbox_7_cptbox_Debugger(PyObject *o) {
  struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *p = (struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->on_return_callback);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4dmoj_6cptbox_7_cptbox_Debugger(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *p = (struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)o;
  if (p->on_return_callback) {
    e = (*v)(p->on_return_callback, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4dmoj_6cptbox_7_cptbox_Debugger(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *p = (struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)o;
  tmp = ((PyObject*)p->on_return_callback);
  p->on_return_callback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4type_1__get__(o);
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_getpid_syscall(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_14getpid_syscall_1__get__(o);
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_syscall(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7syscall_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_syscall(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7syscall_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_result(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_6result_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_result(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_6result_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_uresult(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7uresult_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_uresult(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7uresult_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg0_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg0(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg0_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg1_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg2_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg3(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg3_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg3(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg3_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg4(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg4_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg4(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg4_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg5(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg5_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg5(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_4arg5_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg0_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg0(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg0_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg1_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg2_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg3(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg3_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg3(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg3_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg4(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg4_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg4(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg4_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg5(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg5_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg5(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5uarg5_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_tid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_3tid_1__get__(o);
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_pid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_3pid_1__get__(o);
}

static PyMethodDef __pyx_methods_4dmoj_6cptbox_7_cptbox_Debugger[] = {
  {"readstr", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_1readstr, METH_VARARGS|METH_KEYWORDS, 0},
  {"on_return", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_3on_return, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_8Debugger_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4dmoj_6cptbox_7_cptbox_Debugger[] = {
  {(char *)"type", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_type, 0, (char *)0, 0},
  {(char *)"getpid_syscall", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_getpid_syscall, 0, (char *)0, 0},
  {(char *)"syscall", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_syscall, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_syscall, (char *)0, 0},
  {(char *)"result", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_result, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_result, (char *)0, 0},
  {(char *)"uresult", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_uresult, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_uresult, (char *)0, 0},
  {(char *)"arg0", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg0, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg0, (char *)0, 0},
  {(char *)"arg1", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg1, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg1, (char *)0, 0},
  {(char *)"arg2", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg2, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg2, (char *)0, 0},
  {(char *)"arg3", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg3, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg3, (char *)0, 0},
  {(char *)"arg4", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg4, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg4, (char *)0, 0},
  {(char *)"arg5", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg5, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_arg5, (char *)0, 0},
  {(char *)"uarg0", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg0, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg0, (char *)0, 0},
  {(char *)"uarg1", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg1, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg1, (char *)0, 0},
  {(char *)"uarg2", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg2, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg2, (char *)0, 0},
  {(char *)"uarg3", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg3, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg3, (char *)0, 0},
  {(char *)"uarg4", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg4, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg4, (char *)0, 0},
  {(char *)"uarg5", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg5, __pyx_setprop_4dmoj_6cptbox_7_cptbox_8Debugger_uarg5, (char *)0, 0},
  {(char *)"tid", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_tid, 0, (char *)0, 0},
  {(char *)"pid", __pyx_getprop_4dmoj_6cptbox_7_cptbox_8Debugger_pid, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4dmoj_6cptbox_7_cptbox_Debugger = {
  PyVarObject_HEAD_INIT(0, 0)
  "dmoj.cptbox._cptbox.Debugger", /*tp_name*/
  sizeof(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4dmoj_6cptbox_7_cptbox_Debugger, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4dmoj_6cptbox_7_cptbox_Debugger, /*tp_traverse*/
  __pyx_tp_clear_4dmoj_6cptbox_7_cptbox_Debugger, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4dmoj_6cptbox_7_cptbox_Debugger, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4dmoj_6cptbox_7_cptbox_Debugger, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4dmoj_6cptbox_7_cptbox_Debugger, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_4dmoj_6cptbox_7_cptbox_Process __pyx_vtable_4dmoj_6cptbox_7_cptbox_Process;

static PyObject *__pyx_tp_new_4dmoj_6cptbox_7_cptbox_Process(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)o);
  p->__pyx_vtab = __pyx_vtabptr_4dmoj_6cptbox_7_cptbox_Process;
  p->debugger = ((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4dmoj_6cptbox_7_cptbox_Process(PyObject *o) {
  struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *p = (struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->debugger);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4dmoj_6cptbox_7_cptbox_Process(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *p = (struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)o;
  if (p->debugger) {
    e = (*v)(((PyObject *)p->debugger), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4dmoj_6cptbox_7_cptbox_Process(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *p = (struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *)o;
  tmp = ((PyObject*)p->debugger);
  p->debugger = ((struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_was_initialized(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15was_initialized_1__get__(o);
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__trace_syscalls(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15_trace_syscalls_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__trace_syscalls(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15_trace_syscalls_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_pid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_3pid_1__get__(o);
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_execution_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_14execution_time_1__get__(o);
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_wall_clock_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15wall_clock_time_1__get__(o);
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_cpu_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_8cpu_time_1__get__(o);
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_max_memory(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_10max_memory_1__get__(o);
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_signal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_6signal_1__get__(o);
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_returncode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_10returncode_1__get__(o);
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_debugger(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_8debugger_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process_debugger(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_8debugger_3__set__(o, v);
  }
  else {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_8debugger_5__del__(o);
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__exited(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_7_exited_1__get__(o);
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__exitcode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_9_exitcode_1__get__(o);
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__child_stdin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_12_child_stdin_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__child_stdin(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_12_child_stdin_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__child_stdout(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_stdout_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__child_stdout(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_stdout_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__child_stderr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_stderr_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__child_stderr(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_stderr_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__child_memory(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_memory_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__child_memory(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_child_memory_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__child_address(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_14_child_address_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__child_address(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_14_child_address_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__child_personality(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_18_child_personality_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__child_personality(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_18_child_personality_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__cpu_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_9_cpu_time_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__cpu_time(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_9_cpu_time_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__nproc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_6_nproc_1__get__(o);
}

static int __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__nproc(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_6_nproc_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4dmoj_6cptbox_7_cptbox_Process[] = {
  {"_callback", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_5_callback, METH_O, 0},
  {"_handler", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_7_handler, METH_VARARGS|METH_KEYWORDS, 0},
  {"_protection_fault", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_9_protection_fault, METH_O, 0},
  {"_cpu_time_exceeded", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_11_cpu_time_exceeded, METH_NOARGS, 0},
  {"_spawn", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_13_spawn, METH_VARARGS|METH_KEYWORDS, 0},
  {"_monitor", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_15_monitor, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_7Process_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4dmoj_6cptbox_7_cptbox_Process[] = {
  {(char *)"was_initialized", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_was_initialized, 0, (char *)0, 0},
  {(char *)"_trace_syscalls", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__trace_syscalls, __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__trace_syscalls, (char *)0, 0},
  {(char *)"pid", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_pid, 0, (char *)0, 0},
  {(char *)"execution_time", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_execution_time, 0, (char *)0, 0},
  {(char *)"wall_clock_time", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_wall_clock_time, 0, (char *)0, 0},
  {(char *)"cpu_time", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_cpu_time, 0, (char *)0, 0},
  {(char *)"max_memory", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_max_memory, 0, (char *)0, 0},
  {(char *)"signal", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_signal, 0, (char *)0, 0},
  {(char *)"returncode", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_returncode, 0, (char *)0, 0},
  {(char *)"debugger", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process_debugger, __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process_debugger, (char *)0, 0},
  {(char *)"_exited", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__exited, 0, (char *)0, 0},
  {(char *)"_exitcode", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__exitcode, 0, (char *)0, 0},
  {(char *)"_child_stdin", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__child_stdin, __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__child_stdin, (char *)0, 0},
  {(char *)"_child_stdout", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__child_stdout, __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__child_stdout, (char *)0, 0},
  {(char *)"_child_stderr", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__child_stderr, __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__child_stderr, (char *)0, 0},
  {(char *)"_child_memory", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__child_memory, __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__child_memory, (char *)0, 0},
  {(char *)"_child_address", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__child_address, __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__child_address, (char *)0, 0},
  {(char *)"_child_personality", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__child_personality, __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__child_personality, (char *)0, 0},
  {(char *)"_cpu_time", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__cpu_time, __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__cpu_time, (char *)0, 0},
  {(char *)"_nproc", __pyx_getprop_4dmoj_6cptbox_7_cptbox_7Process__nproc, __pyx_setprop_4dmoj_6cptbox_7_cptbox_7Process__nproc, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4dmoj_6cptbox_7_cptbox_Process = {
  PyVarObject_HEAD_INIT(0, 0)
  "dmoj.cptbox._cptbox.Process", /*tp_name*/
  sizeof(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4dmoj_6cptbox_7_cptbox_Process, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4dmoj_6cptbox_7_cptbox_Process, /*tp_traverse*/
  __pyx_tp_clear_4dmoj_6cptbox_7_cptbox_Process, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4dmoj_6cptbox_7_cptbox_Process, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4dmoj_6cptbox_7_cptbox_Process, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4dmoj_6cptbox_7_cptbox_Process, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"get_memory", (PyCFunction)__pyx_pw_4dmoj_6cptbox_7_cptbox_1get_memory, METH_O, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__cptbox(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__cptbox},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_cptbox",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AT_FDCWD, __pyx_k_AT_FDCWD, sizeof(__pyx_k_AT_FDCWD), 0, 0, 1, 1},
  {&__pyx_n_s_DEBUGGER_ARM, __pyx_k_DEBUGGER_ARM, sizeof(__pyx_k_DEBUGGER_ARM), 0, 0, 1, 1},
  {&__pyx_n_s_DEBUGGER_ARM64, __pyx_k_DEBUGGER_ARM64, sizeof(__pyx_k_DEBUGGER_ARM64), 0, 0, 1, 1},
  {&__pyx_n_s_DEBUGGER_X32, __pyx_k_DEBUGGER_X32, sizeof(__pyx_k_DEBUGGER_X32), 0, 0, 1, 1},
  {&__pyx_n_s_DEBUGGER_X64, __pyx_k_DEBUGGER_X64, sizeof(__pyx_k_DEBUGGER_X64), 0, 0, 1, 1},
  {&__pyx_n_s_DEBUGGER_X86, __pyx_k_DEBUGGER_X86, sizeof(__pyx_k_DEBUGGER_X86), 0, 0, 1, 1},
  {&__pyx_n_s_DEBUGGER_X86_ON_X64, __pyx_k_DEBUGGER_X86_ON_X64, sizeof(__pyx_k_DEBUGGER_X86_ON_X64), 0, 0, 1, 1},
  {&__pyx_n_s_Debugger, __pyx_k_Debugger, sizeof(__pyx_k_Debugger), 0, 0, 1, 1},
  {&__pyx_n_s_MAX_SYSCALL_NUMBER, __pyx_k_MAX_SYSCALL_NUMBER, sizeof(__pyx_k_MAX_SYSCALL_NUMBER), 0, 0, 1, 1},
  {&__pyx_n_s_OSError, __pyx_k_OSError, sizeof(__pyx_k_OSError), 0, 0, 1, 1},
  {&__pyx_n_s_Process, __pyx_k_Process, sizeof(__pyx_k_Process), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unsupported_debugger_configurati, __pyx_k_Unsupported_debugger_configurati, sizeof(__pyx_k_Unsupported_debugger_configurati), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 0},
  {&__pyx_n_s_address, __pyx_k_address, sizeof(__pyx_k_address), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_bsd_get_proc_cwd, __pyx_k_bsd_get_proc_cwd, sizeof(__pyx_k_bsd_get_proc_cwd), 0, 0, 1, 1},
  {&__pyx_n_s_bsd_get_proc_fdno, __pyx_k_bsd_get_proc_fdno, sizeof(__pyx_k_bsd_get_proc_fdno), 0, 0, 1, 1},
  {&__pyx_n_s_buf, __pyx_k_buf, sizeof(__pyx_k_buf), 0, 0, 1, 1},
  {&__pyx_n_s_callback, __pyx_k_callback, sizeof(__pyx_k_callback), 0, 0, 1, 1},
  {&__pyx_n_s_chdir, __pyx_k_chdir, sizeof(__pyx_k_chdir), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_cpu_time_exceeded, __pyx_k_cpu_time_exceeded, sizeof(__pyx_k_cpu_time_exceeded), 0, 0, 1, 1},
  {&__pyx_n_s_debugger, __pyx_k_debugger, sizeof(__pyx_k_debugger), 0, 0, 1, 1},
  {&__pyx_n_s_debugger_type, __pyx_k_debugger_type, sizeof(__pyx_k_debugger_type), 0, 0, 1, 1},
  {&__pyx_n_s_dmoj_cptbox__cptbox, __pyx_k_dmoj_cptbox__cptbox, sizeof(__pyx_k_dmoj_cptbox__cptbox), 0, 0, 1, 1},
  {&__pyx_kp_s_dmoj_cptbox__cptbox_pyx, __pyx_k_dmoj_cptbox__cptbox_pyx, sizeof(__pyx_k_dmoj_cptbox__cptbox_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_env, __pyx_k_env, sizeof(__pyx_k_env), 0, 0, 1, 1},
  {&__pyx_kp_s_failed_to_spawn_child, __pyx_k_failed_to_spawn_child, sizeof(__pyx_k_failed_to_spawn_child), 0, 0, 1, 0},
  {&__pyx_n_s_fd, __pyx_k_fd, sizeof(__pyx_k_fd), 0, 0, 1, 1},
  {&__pyx_n_s_fds, __pyx_k_fds, sizeof(__pyx_k_fds), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_handler, __pyx_k_handler, sizeof(__pyx_k_handler), 0, 0, 1, 1},
  {&__pyx_n_s_handler_2, __pyx_k_handler_2, sizeof(__pyx_k_handler_2), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_size, __pyx_k_max_size, sizeof(__pyx_k_max_size), 0, 0, 1, 1},
  {&__pyx_n_s_monitor, __pyx_k_monitor, sizeof(__pyx_k_monitor), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_pid, __pyx_k_pid, sizeof(__pyx_k_pid), 0, 0, 1, 1},
  {&__pyx_n_s_protection_fault, __pyx_k_protection_fault, sizeof(__pyx_k_protection_fault), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {&__pyx_kp_s_self_thisptr_cannot_be_converted, __pyx_k_self_thisptr_cannot_be_converted, sizeof(__pyx_k_self_thisptr_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_spawn, __pyx_k_spawn, sizeof(__pyx_k_spawn), 0, 0, 1, 1},
  {&__pyx_n_s_syscall, __pyx_k_syscall, sizeof(__pyx_k_syscall), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_was_initialized, __pyx_k_was_initialized, sizeof(__pyx_k_was_initialized), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 129, __pyx_L1_error)
  __pyx_builtin_OSError = __Pyx_GetBuiltinName(__pyx_n_s_OSError); if (!__pyx_builtin_OSError) __PYX_ERR(0, 163, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 341, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 404, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 404, __pyx_L1_error)
  #endif
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 409, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "dmoj/cptbox/_cptbox.pyx":341
 *         self._debugger = get_ptdebugger(debugger)
 *         if not self._debugger:
 *             raise ValueError('Unsupported debugger configuration')             # <<<<<<<<<<<<<<
 * 
 *         self.debugger = <Debugger?>debugger_type()
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Unsupported_debugger_configurati); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "dmoj/cptbox/_cptbox.pyx":409
 *             if self.process.spawn(pt_child, &config):
 *                 with gil:
 *                     raise RuntimeError('failed to spawn child')             # <<<<<<<<<<<<<<
 *         free(config.argv)
 *         free(config.envp)
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_failed_to_spawn_child); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "dmoj/cptbox/_cptbox.pyx":160
 *     return memory
 * 
 * def bsd_get_proc_cwd(pid_t pid):             # <<<<<<<<<<<<<<
 *     cdef char *buf = _bsd_get_proc_cwd(pid)
 *     if not buf:
 */
  __pyx_tuple__8 = PyTuple_Pack(4, __pyx_n_s_pid, __pyx_n_s_pid, __pyx_n_s_buf, __pyx_n_s_res); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dmoj_cptbox__cptbox_pyx, __pyx_n_s_bsd_get_proc_cwd, 160, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 160, __pyx_L1_error)

  /* "dmoj/cptbox/_cptbox.pyx":168
 *     return res
 * 
 * def bsd_get_proc_fdno(pid_t pid, int fd):             # <<<<<<<<<<<<<<
 *     cdef char *buf = _bsd_get_proc_fdno(pid, fd)
 *     if not buf:
 */
  __pyx_tuple__10 = PyTuple_Pack(4, __pyx_n_s_pid, __pyx_n_s_fd, __pyx_n_s_buf, __pyx_n_s_res); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dmoj_cptbox__cptbox_pyx, __pyx_n_s_bsd_get_proc_fdno, 168, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_cptbox(void); /*proto*/
PyMODINIT_FUNC init_cptbox(void)
#else
PyMODINIT_FUNC PyInit__cptbox(void); /*proto*/
PyMODINIT_FUNC PyInit__cptbox(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec__cptbox(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #endif
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__cptbox(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_cptbox", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_dmoj__cptbox___cptbox) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "dmoj.cptbox._cptbox")) {
      if (unlikely(PyDict_SetItemString(modules, "dmoj.cptbox._cptbox", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_4dmoj_6cptbox_7_cptbox_Debugger = &__pyx_vtable_4dmoj_6cptbox_7_cptbox_Debugger;
  __pyx_vtable_4dmoj_6cptbox_7_cptbox_Debugger._on_return = (PyObject *(*)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Debugger *, int))__pyx_f_4dmoj_6cptbox_7_cptbox_8Debugger__on_return;
  if (PyType_Ready(&__pyx_type_4dmoj_6cptbox_7_cptbox_Debugger) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
  __pyx_type_4dmoj_6cptbox_7_cptbox_Debugger.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_4dmoj_6cptbox_7_cptbox_Debugger.tp_dict, __pyx_vtabptr_4dmoj_6cptbox_7_cptbox_Debugger) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Debugger", (PyObject *)&__pyx_type_4dmoj_6cptbox_7_cptbox_Debugger) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4dmoj_6cptbox_7_cptbox_Debugger) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
  __pyx_ptype_4dmoj_6cptbox_7_cptbox_Debugger = &__pyx_type_4dmoj_6cptbox_7_cptbox_Debugger;
  __pyx_vtabptr_4dmoj_6cptbox_7_cptbox_Process = &__pyx_vtable_4dmoj_6cptbox_7_cptbox_Process;
  __pyx_vtable_4dmoj_6cptbox_7_cptbox_Process._syscall_handler = (int (*)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *, int))__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__syscall_handler;
  __pyx_vtable_4dmoj_6cptbox_7_cptbox_Process._event_handler = (int (*)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *, int, unsigned long))__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__event_handler;
  __pyx_vtable_4dmoj_6cptbox_7_cptbox_Process._handler = (PyObject *(*)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__handler;
  __pyx_vtable_4dmoj_6cptbox_7_cptbox_Process._protection_fault = (PyObject *(*)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__protection_fault;
  __pyx_vtable_4dmoj_6cptbox_7_cptbox_Process._cpu_time_exceeded = (PyObject *(*)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *, int __pyx_skip_dispatch))__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__cpu_time_exceeded;
  __pyx_vtable_4dmoj_6cptbox_7_cptbox_Process._spawn = (PyObject *(*)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_4dmoj_6cptbox_7_cptbox_7Process__spawn *__pyx_optional_args))__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__spawn;
  __pyx_vtable_4dmoj_6cptbox_7_cptbox_Process._monitor = (PyObject *(*)(struct __pyx_obj_4dmoj_6cptbox_7_cptbox_Process *, int __pyx_skip_dispatch))__pyx_f_4dmoj_6cptbox_7_cptbox_7Process__monitor;
  if (PyType_Ready(&__pyx_type_4dmoj_6cptbox_7_cptbox_Process) < 0) __PYX_ERR(0, 319, __pyx_L1_error)
  __pyx_type_4dmoj_6cptbox_7_cptbox_Process.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_4dmoj_6cptbox_7_cptbox_Process.tp_dict, __pyx_vtabptr_4dmoj_6cptbox_7_cptbox_Process) < 0) __PYX_ERR(0, 319, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Process", (PyObject *)&__pyx_type_4dmoj_6cptbox_7_cptbox_Process) < 0) __PYX_ERR(0, 319, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4dmoj_6cptbox_7_cptbox_Process) < 0) __PYX_ERR(0, 319, __pyx_L1_error)
  __pyx_ptype_4dmoj_6cptbox_7_cptbox_Process = &__pyx_type_4dmoj_6cptbox_7_cptbox_Process;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "dmoj/cptbox/_cptbox.pyx":9
 * from posix.types cimport pid_t
 * 
 * __all__ = ['Process', 'Debugger', 'bsd_get_proc_cwd', 'bsd_get_proc_fdno', 'MAX_SYSCALL_NUMBER',             # <<<<<<<<<<<<<<
 *            'DEBUGGER_X86', 'DEBUGGER_X64', 'DEBUGGER_X86_ON_X64', 'DEBUGGER_X32', 'DEBUGGER_ARM',
 *            'DEBUGGER_ARM64', 'AT_FDCWD']
 */
  __pyx_t_1 = PyList_New(12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Process);
  __Pyx_GIVEREF(__pyx_n_s_Process);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Process);
  __Pyx_INCREF(__pyx_n_s_Debugger);
  __Pyx_GIVEREF(__pyx_n_s_Debugger);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_Debugger);
  __Pyx_INCREF(__pyx_n_s_bsd_get_proc_cwd);
  __Pyx_GIVEREF(__pyx_n_s_bsd_get_proc_cwd);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_bsd_get_proc_cwd);
  __Pyx_INCREF(__pyx_n_s_bsd_get_proc_fdno);
  __Pyx_GIVEREF(__pyx_n_s_bsd_get_proc_fdno);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_bsd_get_proc_fdno);
  __Pyx_INCREF(__pyx_n_s_MAX_SYSCALL_NUMBER);
  __Pyx_GIVEREF(__pyx_n_s_MAX_SYSCALL_NUMBER);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_MAX_SYSCALL_NUMBER);
  __Pyx_INCREF(__pyx_n_s_DEBUGGER_X86);
  __Pyx_GIVEREF(__pyx_n_s_DEBUGGER_X86);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_DEBUGGER_X86);
  __Pyx_INCREF(__pyx_n_s_DEBUGGER_X64);
  __Pyx_GIVEREF(__pyx_n_s_DEBUGGER_X64);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_DEBUGGER_X64);
  __Pyx_INCREF(__pyx_n_s_DEBUGGER_X86_ON_X64);
  __Pyx_GIVEREF(__pyx_n_s_DEBUGGER_X86_ON_X64);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_DEBUGGER_X86_ON_X64);
  __Pyx_INCREF(__pyx_n_s_DEBUGGER_X32);
  __Pyx_GIVEREF(__pyx_n_s_DEBUGGER_X32);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_DEBUGGER_X32);
  __Pyx_INCREF(__pyx_n_s_DEBUGGER_ARM);
  __Pyx_GIVEREF(__pyx_n_s_DEBUGGER_ARM);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_DEBUGGER_ARM);
  __Pyx_INCREF(__pyx_n_s_DEBUGGER_ARM64);
  __Pyx_GIVEREF(__pyx_n_s_DEBUGGER_ARM64);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_DEBUGGER_ARM64);
  __Pyx_INCREF(__pyx_n_s_AT_FDCWD);
  __Pyx_GIVEREF(__pyx_n_s_AT_FDCWD);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_s_AT_FDCWD);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dmoj/cptbox/_cptbox.pyx":111
 *     cdef int _AT_FDCWD "AT_FDCWD"
 * 
 * MAX_SYSCALL_NUMBER = MAX_SYSCALL             # <<<<<<<<<<<<<<
 * AT_FDCWD = _AT_FDCWD
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(MAX_SYSCALL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MAX_SYSCALL_NUMBER, __pyx_t_1) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dmoj/cptbox/_cptbox.pyx":112
 * 
 * MAX_SYSCALL_NUMBER = MAX_SYSCALL
 * AT_FDCWD = _AT_FDCWD             # <<<<<<<<<<<<<<
 * 
 * cdef int pt_child(void *context) nogil:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(AT_FDCWD); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AT_FDCWD, __pyx_t_1) < 0) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dmoj/cptbox/_cptbox.pyx":160
 *     return memory
 * 
 * def bsd_get_proc_cwd(pid_t pid):             # <<<<<<<<<<<<<<
 *     cdef char *buf = _bsd_get_proc_cwd(pid)
 *     if not buf:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4dmoj_6cptbox_7_cptbox_3bsd_get_proc_cwd, NULL, __pyx_n_s_dmoj_cptbox__cptbox); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bsd_get_proc_cwd, __pyx_t_1) < 0) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dmoj/cptbox/_cptbox.pyx":168
 *     return res
 * 
 * def bsd_get_proc_fdno(pid_t pid, int fd):             # <<<<<<<<<<<<<<
 *     cdef char *buf = _bsd_get_proc_fdno(pid, fd)
 *     if not buf:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4dmoj_6cptbox_7_cptbox_5bsd_get_proc_fdno, NULL, __pyx_n_s_dmoj_cptbox__cptbox); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bsd_get_proc_fdno, __pyx_t_1) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dmoj/cptbox/_cptbox.pyx":1
 * from cpython.exc cimport PyErr_SetFromErrno             # <<<<<<<<<<<<<<
 * from libc.stdio cimport FILE, fopen, fclose, fgets, sprintf
 * from libc.stdlib cimport malloc, free, strtoul
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(DEBUGGER_ARM);
    if (unlikely(!wrapped)) __PYX_ERR(0, 102, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "DEBUGGER_ARM", wrapped) < 0) __PYX_ERR(0, 102, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(DEBUGGER_ARM64);
    if (unlikely(!wrapped)) __PYX_ERR(0, 103, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "DEBUGGER_ARM64", wrapped) < 0) __PYX_ERR(0, 103, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(DEBUGGER_X32);
    if (unlikely(!wrapped)) __PYX_ERR(0, 101, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "DEBUGGER_X32", wrapped) < 0) __PYX_ERR(0, 101, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(DEBUGGER_X64);
    if (unlikely(!wrapped)) __PYX_ERR(0, 99, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "DEBUGGER_X64", wrapped) < 0) __PYX_ERR(0, 99, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(DEBUGGER_X86);
    if (unlikely(!wrapped)) __PYX_ERR(0, 98, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "DEBUGGER_X86", wrapped) < 0) __PYX_ERR(0, 98, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(DEBUGGER_X86_ON_X64);
    if (unlikely(!wrapped)) __PYX_ERR(0, 100, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "DEBUGGER_X86_ON_X64", wrapped) < 0) __PYX_ERR(0, 100, __pyx_L1_error);
  }

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init dmoj.cptbox._cptbox", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init dmoj.cptbox._cptbox");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseException */
  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ExtTypeTest */
  static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetItemInt */
  static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* SetVTable */
  static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_pid_t(pid_t value) {
    const pid_t neg_one = (pid_t) -1, const_zero = (pid_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(pid_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(pid_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(pid_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(pid_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(pid_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(pid_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE pid_t __Pyx_PyInt_As_pid_t(PyObject *x) {
    const pid_t neg_one = (pid_t) -1, const_zero = (pid_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(pid_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(pid_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (pid_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (pid_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(pid_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(pid_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) >= 2 * PyLong_SHIFT) {
                            return (pid_t) (((((pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(pid_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) >= 3 * PyLong_SHIFT) {
                            return (pid_t) (((((((pid_t)digits[2]) << PyLong_SHIFT) | (pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(pid_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) >= 4 * PyLong_SHIFT) {
                            return (pid_t) (((((((((pid_t)digits[3]) << PyLong_SHIFT) | (pid_t)digits[2]) << PyLong_SHIFT) | (pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (pid_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(pid_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(pid_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(pid_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(pid_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (pid_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(pid_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(pid_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(pid_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) - 1 > 2 * PyLong_SHIFT) {
                            return (pid_t) (((pid_t)-1)*(((((pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(pid_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) - 1 > 2 * PyLong_SHIFT) {
                            return (pid_t) ((((((pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(pid_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) - 1 > 3 * PyLong_SHIFT) {
                            return (pid_t) (((pid_t)-1)*(((((((pid_t)digits[2]) << PyLong_SHIFT) | (pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(pid_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) - 1 > 3 * PyLong_SHIFT) {
                            return (pid_t) ((((((((pid_t)digits[2]) << PyLong_SHIFT) | (pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(pid_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) - 1 > 4 * PyLong_SHIFT) {
                            return (pid_t) (((pid_t)-1)*(((((((((pid_t)digits[3]) << PyLong_SHIFT) | (pid_t)digits[2]) << PyLong_SHIFT) | (pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(pid_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(pid_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(pid_t) - 1 > 4 * PyLong_SHIFT) {
                            return (pid_t) ((((((((((pid_t)digits[3]) << PyLong_SHIFT) | (pid_t)digits[2]) << PyLong_SHIFT) | (pid_t)digits[1]) << PyLong_SHIFT) | (pid_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(pid_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(pid_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(pid_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(pid_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            pid_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (pid_t) -1;
        }
    } else {
        pid_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (pid_t) -1;
        val = __Pyx_PyInt_As_pid_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to pid_t");
    return (pid_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to pid_t");
    return (pid_t) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *x) {
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 2 * PyLong_SHIFT) {
                            return (unsigned long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 3 * PyLong_SHIFT) {
                            return (unsigned long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 4 * PyLong_SHIFT) {
                            return (unsigned long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned long) ((((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned long) ((((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned long) ((((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned long) -1;
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned long) -1;
        val = __Pyx_PyInt_As_unsigned_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned long");
    return (unsigned long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned long");
    return (unsigned long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
  #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
